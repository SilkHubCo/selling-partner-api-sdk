/**
 * Selling Partner API for Direct Fulfillment Inventory Updates
 * The Selling Partner API for Direct Fulfillment Inventory Updates provides programmatic access to a direct fulfillment vendor\'s inventory updates.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Inventory details required to update some or all items for the requested warehouse.
 * @export
 * @interface InventoryUpdate
 */
export interface InventoryUpdate {
    /**
     *
     * @type {PartyIdentification}
     * @memberof InventoryUpdate
     */
    sellingParty: PartyIdentification;
    /**
     * When `true`, this request contains a full feed. When `false`, this request contains a partial feed. When sending a full feed, you must send information about all items in the warehouse. Any items not in the full feed are updated as not available. When sending a partial feed, only include the items that need an inventory update. The status of other items will remain unchanged.
     * @type {boolean}
     * @memberof InventoryUpdate
     */
    isFullUpdate: boolean;
    /**
     * A list of inventory items with updated details, including quantity available.
     * @type {Array<ItemDetails>}
     * @memberof InventoryUpdate
     */
    items: Array<ItemDetails>;
}
/**
 * Updated inventory details for an item.
 * @export
 * @interface ItemDetails
 */
export interface ItemDetails {
    /**
     * The buyer-selected product identification for the item. Either `buyerProductIdentifier` or `vendorProductIdentifier` must be submitted.
     * @type {string}
     * @memberof ItemDetails
     */
    buyerProductIdentifier?: string;
    /**
     * The vendor selected product identification for the item. Either `buyerProductIdentifier` or `vendorProductIdentifier` must be submitted.
     * @type {string}
     * @memberof ItemDetails
     */
    vendorProductIdentifier?: string;
    /**
     *
     * @type {ItemQuantity}
     * @memberof ItemDetails
     */
    availableQuantity: ItemQuantity;
    /**
     * When `true`, the item is permanently unavailable.
     * @type {boolean}
     * @memberof ItemDetails
     */
    isObsolete?: boolean;
}
/**
 * Details about item quantity.
 * @export
 * @interface ItemQuantity
 */
export interface ItemQuantity {
    /**
     * Quantity of units available for a specific item.
     * @type {number}
     * @memberof ItemQuantity
     */
    amount?: number;
    /**
     * Unit of measure for the available quantity.
     * @type {string}
     * @memberof ItemQuantity
     */
    unitOfMeasure: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * Name, address and tax details for a group.
 * @export
 * @interface PartyIdentification
 */
export interface PartyIdentification {
    /**
     * Assigned identification for the party.
     * @type {string}
     * @memberof PartyIdentification
     */
    partyId: string;
}
/**
 * The request body for the `submitInventoryUpdate` operation.
 * @export
 * @interface SubmitInventoryUpdateRequest
 */
export interface SubmitInventoryUpdateRequest {
    /**
     *
     * @type {InventoryUpdate}
     * @memberof SubmitInventoryUpdateRequest
     */
    inventory?: InventoryUpdate;
}
/**
 * The response schema for the `submitInventoryUpdate` operation.
 * @export
 * @interface SubmitInventoryUpdateResponse
 */
export interface SubmitInventoryUpdateResponse {
    /**
     *
     * @type {TransactionReference}
     * @memberof SubmitInventoryUpdateResponse
     */
    payload?: TransactionReference;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SubmitInventoryUpdateResponse
     */
    errors?: Array<Error>;
}
/**
 * A response that contains the transaction ID.
 * @export
 * @interface TransactionReference
 */
export interface TransactionReference {
    /**
     * GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
     * @type {string}
     * @memberof TransactionReference
     */
    transactionId?: string;
}
/**
 * UpdateInventoryApi - axios parameter creator
 * @export
 */
export declare const UpdateInventoryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the *SP-API*](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} warehouseId Identifier for the warehouse for which to update inventory.
     * @param {SubmitInventoryUpdateRequest} body The request body that contains the inventory update data to submit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitInventoryUpdate: (warehouseId: string, body: SubmitInventoryUpdateRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * UpdateInventoryApi - functional programming interface
 * @export
 */
export declare const UpdateInventoryApiFp: (configuration?: Configuration) => {
    /**
     * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the *SP-API*](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} warehouseId Identifier for the warehouse for which to update inventory.
     * @param {SubmitInventoryUpdateRequest} body The request body that contains the inventory update data to submit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitInventoryUpdate(warehouseId: string, body: SubmitInventoryUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitInventoryUpdateResponse>>;
};
/**
 * UpdateInventoryApi - factory interface
 * @export
 */
export declare const UpdateInventoryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the *SP-API*](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} warehouseId Identifier for the warehouse for which to update inventory.
     * @param {SubmitInventoryUpdateRequest} body The request body that contains the inventory update data to submit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitInventoryUpdate(warehouseId: string, body: SubmitInventoryUpdateRequest, options?: any): AxiosPromise<SubmitInventoryUpdateResponse>;
};
/**
 * Request parameters for submitInventoryUpdate operation in UpdateInventoryApi.
 * @export
 * @interface UpdateInventoryApiSubmitInventoryUpdateRequest
 */
export interface UpdateInventoryApiSubmitInventoryUpdateRequest {
    /**
     * Identifier for the warehouse for which to update inventory.
     * @type {string}
     * @memberof UpdateInventoryApiSubmitInventoryUpdate
     */
    readonly warehouseId: string;
    /**
     * The request body that contains the inventory update data to submit.
     * @type {SubmitInventoryUpdateRequest}
     * @memberof UpdateInventoryApiSubmitInventoryUpdate
     */
    readonly body: SubmitInventoryUpdateRequest;
}
/**
 * UpdateInventoryApi - object-oriented interface
 * @export
 * @class UpdateInventoryApi
 * @extends {BaseAPI}
 */
export declare class UpdateInventoryApi extends BaseAPI {
    /**
     * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the *SP-API*](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {UpdateInventoryApiSubmitInventoryUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateInventoryApi
     */
    submitInventoryUpdate(requestParameters: UpdateInventoryApiSubmitInventoryUpdateRequest, options?: any): Promise<import("axios").AxiosResponse<SubmitInventoryUpdateResponse, any>>;
}

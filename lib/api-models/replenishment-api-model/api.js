"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Replenishment
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SellingpartnersApi = exports.SellingpartnersApiFactory = exports.SellingpartnersApiFp = exports.SellingpartnersApiAxiosParamCreator = exports.OffersApi = exports.OffersApiFactory = exports.OffersApiFp = exports.OffersApiAxiosParamCreator = exports.TimePeriodType = exports.SortOrder = exports.ProgramType = exports.Metric = exports.ListOffersSortKey = exports.ListOfferMetricsSortKey = exports.EnrollmentMethod = exports.EligibilityStatus = exports.AutoEnrollmentPreference = exports.AggregationFrequency = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * The time period used to group data in the response. Note that this is only valid for the `PERFORMANCE` time period type.
 * @export
 * @enum {string}
 */
var AggregationFrequency;
(function (AggregationFrequency) {
    AggregationFrequency["Week"] = "WEEK";
    AggregationFrequency["Month"] = "MONTH";
    AggregationFrequency["Quarter"] = "QUARTER";
    AggregationFrequency["Year"] = "YEAR";
})(AggregationFrequency || (exports.AggregationFrequency = AggregationFrequency = {}));
/**
 * The auto-enrollment preference indicates whether the offer is opted-in to or opted-out of Amazon\'s auto-enrollment feature.
 * @export
 * @enum {string}
 */
var AutoEnrollmentPreference;
(function (AutoEnrollmentPreference) {
    AutoEnrollmentPreference["In"] = "OPTED_IN";
    AutoEnrollmentPreference["Out"] = "OPTED_OUT";
})(AutoEnrollmentPreference || (exports.AutoEnrollmentPreference = AutoEnrollmentPreference = {}));
/**
 * The current eligibility status of an offer.
 * @export
 * @enum {string}
 */
var EligibilityStatus;
(function (EligibilityStatus) {
    EligibilityStatus["Eligible"] = "ELIGIBLE";
    EligibilityStatus["Ineligible"] = "INELIGIBLE";
    EligibilityStatus["Suspended"] = "SUSPENDED";
    EligibilityStatus["ReplenishmentOnlyOrdering"] = "REPLENISHMENT_ONLY_ORDERING";
})(EligibilityStatus || (exports.EligibilityStatus = EligibilityStatus = {}));
/**
 * The enrollment method used to enroll the offer into the program.
 * @export
 * @enum {string}
 */
var EnrollmentMethod;
(function (EnrollmentMethod) {
    EnrollmentMethod["Manual"] = "MANUAL";
    EnrollmentMethod["Automatic"] = "AUTOMATIC";
})(EnrollmentMethod || (exports.EnrollmentMethod = EnrollmentMethod = {}));
/**
 * The attribute to use to sort the results.
 * @export
 * @enum {string}
 */
var ListOfferMetricsSortKey;
(function (ListOfferMetricsSortKey) {
    ListOfferMetricsSortKey["ShippedSubscriptionUnits"] = "SHIPPED_SUBSCRIPTION_UNITS";
    ListOfferMetricsSortKey["TotalSubscriptionsRevenue"] = "TOTAL_SUBSCRIPTIONS_REVENUE";
    ListOfferMetricsSortKey["ActiveSubscriptions"] = "ACTIVE_SUBSCRIPTIONS";
    ListOfferMetricsSortKey["Next90DaysShippedSubscriptionUnits"] = "NEXT_90DAYS_SHIPPED_SUBSCRIPTION_UNITS";
    ListOfferMetricsSortKey["Next60DaysShippedSubscriptionUnits"] = "NEXT_60DAYS_SHIPPED_SUBSCRIPTION_UNITS";
    ListOfferMetricsSortKey["Next30DaysShippedSubscriptionUnits"] = "NEXT_30DAYS_SHIPPED_SUBSCRIPTION_UNITS";
    ListOfferMetricsSortKey["Next90DaysTotalSubscriptionsRevenue"] = "NEXT_90DAYS_TOTAL_SUBSCRIPTIONS_REVENUE";
    ListOfferMetricsSortKey["Next60DaysTotalSubscriptionsRevenue"] = "NEXT_60DAYS_TOTAL_SUBSCRIPTIONS_REVENUE";
    ListOfferMetricsSortKey["Next30DaysTotalSubscriptionsRevenue"] = "NEXT_30DAYS_TOTAL_SUBSCRIPTIONS_REVENUE";
})(ListOfferMetricsSortKey || (exports.ListOfferMetricsSortKey = ListOfferMetricsSortKey = {}));
/**
 * The attribute to use to sort the results.
 * @export
 * @enum {string}
 */
var ListOffersSortKey;
(function (ListOffersSortKey) {
    ListOffersSortKey["Asin"] = "ASIN";
    ListOffersSortKey["SellingPartnerFundedBaseDiscountPercentage"] = "SELLING_PARTNER_FUNDED_BASE_DISCOUNT_PERCENTAGE";
    ListOffersSortKey["SellingPartnerFundedTieredDiscountPercentage"] = "SELLING_PARTNER_FUNDED_TIERED_DISCOUNT_PERCENTAGE";
    ListOffersSortKey["AmazonFundedBaseDiscountPercentage"] = "AMAZON_FUNDED_BASE_DISCOUNT_PERCENTAGE";
    ListOffersSortKey["AmazonFundedTieredDiscountPercentage"] = "AMAZON_FUNDED_TIERED_DISCOUNT_PERCENTAGE";
})(ListOffersSortKey || (exports.ListOffersSortKey = ListOffersSortKey = {}));
/**
 * The metric name and description.
 * @export
 * @enum {string}
 */
var Metric;
(function (Metric) {
    Metric["ShippedSubscriptionUnits"] = "SHIPPED_SUBSCRIPTION_UNITS";
    Metric["TotalSubscriptionsRevenue"] = "TOTAL_SUBSCRIPTIONS_REVENUE";
    Metric["ActiveSubscriptions"] = "ACTIVE_SUBSCRIPTIONS";
    Metric["NotDeliveredDueToOos"] = "NOT_DELIVERED_DUE_TO_OOS";
    Metric["SubscriberNonSubscriberAverageRevenue"] = "SUBSCRIBER_NON_SUBSCRIBER_AVERAGE_REVENUE";
    Metric["LostRevenueDueToOos"] = "LOST_REVENUE_DUE_TO_OOS";
    Metric["SubscriberNonSubscriberAverageReorders"] = "SUBSCRIBER_NON_SUBSCRIBER_AVERAGE_REORDERS";
    Metric["CouponsRevenuePenetration"] = "COUPONS_REVENUE_PENETRATION";
})(Metric || (exports.Metric = Metric = {}));
/**
 * The replenishment program type.
 * @export
 * @enum {string}
 */
var ProgramType;
(function (ProgramType) {
    ProgramType["SubscribeAndSave"] = "SUBSCRIBE_AND_SAVE";
})(ProgramType || (exports.ProgramType = ProgramType = {}));
/**
 * The sort order.
 * @export
 * @enum {string}
 */
var SortOrder;
(function (SortOrder) {
    SortOrder["Asc"] = "ASC";
    SortOrder["Desc"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
/**
 * The time period type that determines whether the metrics requested are backward-looking (performance) or forward-looking (forecast).
 * @export
 * @enum {string}
 */
var TimePeriodType;
(function (TimePeriodType) {
    TimePeriodType["Performance"] = "PERFORMANCE";
    TimePeriodType["Forecast"] = "FORECAST";
})(TimePeriodType || (exports.TimePeriodType = TimePeriodType = {}));
/**
 * OffersApi - axios parameter creator
 * @export
 */
const OffersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner\'s offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOfferMetricsRequest} [body] The request body for the &#x60;listOfferMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfferMetrics: async (body, options = {}) => {
            const localVarPath = `/replenishment/2022-11-07/offers/metrics/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a selling partner\'s replenishment program offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOffersRequest} [body] The request body for the &#x60;listOffers&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOffers: async (body, options = {}) => {
            const localVarPath = `/replenishment/2022-11-07/offers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OffersApiAxiosParamCreator = OffersApiAxiosParamCreator;
/**
 * OffersApi - functional programming interface
 * @export
 */
const OffersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OffersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner\'s offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOfferMetricsRequest} [body] The request body for the &#x60;listOfferMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOfferMetrics(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOfferMetrics(body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns the details of a selling partner\'s replenishment program offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOffersRequest} [body] The request body for the &#x60;listOffers&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOffers(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOffers(body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.OffersApiFp = OffersApiFp;
/**
 * OffersApi - factory interface
 * @export
 */
const OffersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OffersApiFp)(configuration);
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner\'s offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOfferMetricsRequest} [body] The request body for the &#x60;listOfferMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfferMetrics(body, options) {
            return localVarFp.listOfferMetrics(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a selling partner\'s replenishment program offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOffersRequest} [body] The request body for the &#x60;listOffers&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOffers(body, options) {
            return localVarFp.listOffers(body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.OffersApiFactory = OffersApiFactory;
/**
 * OffersApi - object-oriented interface
 * @export
 * @class OffersApi
 * @extends {BaseAPI}
 */
class OffersApi extends base_1.BaseAPI {
    /**
     * Returns aggregated replenishment program metrics for a selling partner\'s offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OffersApiListOfferMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    listOfferMetrics(requestParameters = {}, options) {
        return (0, exports.OffersApiFp)(this.configuration).listOfferMetrics(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a selling partner\'s replenishment program offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OffersApiListOffersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    listOffers(requestParameters = {}, options) {
        return (0, exports.OffersApiFp)(this.configuration).listOffers(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OffersApi = OffersApi;
/**
 * SellingpartnersApi - axios parameter creator
 * @export
 */
const SellingpartnersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetSellingPartnerMetricsRequest} [body] The request body for the &#x60;getSellingPartnerMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellingPartnerMetrics: async (body, options = {}) => {
            const localVarPath = `/replenishment/2022-11-07/sellingPartners/metrics/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SellingpartnersApiAxiosParamCreator = SellingpartnersApiAxiosParamCreator;
/**
 * SellingpartnersApi - functional programming interface
 * @export
 */
const SellingpartnersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SellingpartnersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetSellingPartnerMetricsRequest} [body] The request body for the &#x60;getSellingPartnerMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSellingPartnerMetrics(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSellingPartnerMetrics(body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.SellingpartnersApiFp = SellingpartnersApiFp;
/**
 * SellingpartnersApi - factory interface
 * @export
 */
const SellingpartnersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SellingpartnersApiFp)(configuration);
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetSellingPartnerMetricsRequest} [body] The request body for the &#x60;getSellingPartnerMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellingPartnerMetrics(body, options) {
            return localVarFp.getSellingPartnerMetrics(body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SellingpartnersApiFactory = SellingpartnersApiFactory;
/**
 * SellingpartnersApi - object-oriented interface
 * @export
 * @class SellingpartnersApi
 * @extends {BaseAPI}
 */
class SellingpartnersApi extends base_1.BaseAPI {
    /**
     * Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {SellingpartnersApiGetSellingPartnerMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellingpartnersApi
     */
    getSellingPartnerMetrics(requestParameters = {}, options) {
        return (0, exports.SellingpartnersApiFp)(this.configuration).getSellingPartnerMetrics(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SellingpartnersApi = SellingpartnersApi;
//# sourceMappingURL=api.js.map
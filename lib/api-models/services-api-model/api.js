"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceApi = exports.ServiceApiFactory = exports.ServiceApiFp = exports.ServiceApiAxiosParamCreator = exports.ServiceUploadDocumentContentTypeEnum = exports.ServiceLocationServiceLocationTypeEnum = exports.ServiceJobServiceJobStatusEnum = exports.ReservationTypeEnum = exports.PoaPoaTypeEnum = exports.ModelErrorErrorLevelEnum = exports.EncryptionDetailsStandardEnum = exports.DayOfWeek = exports.CapacityType = exports.AssociatedItemItemStatusEnum = exports.AppointmentSlotReportSchedulingTypeEnum = exports.AppointmentAppointmentStatusEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var AppointmentAppointmentStatusEnum;
(function (AppointmentAppointmentStatusEnum) {
    AppointmentAppointmentStatusEnum["Active"] = "ACTIVE";
    AppointmentAppointmentStatusEnum["Cancelled"] = "CANCELLED";
    AppointmentAppointmentStatusEnum["Completed"] = "COMPLETED";
})(AppointmentAppointmentStatusEnum || (exports.AppointmentAppointmentStatusEnum = AppointmentAppointmentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AppointmentSlotReportSchedulingTypeEnum;
(function (AppointmentSlotReportSchedulingTypeEnum) {
    AppointmentSlotReportSchedulingTypeEnum["RealTimeScheduling"] = "REAL_TIME_SCHEDULING";
    AppointmentSlotReportSchedulingTypeEnum["NonRealTimeScheduling"] = "NON_REAL_TIME_SCHEDULING";
})(AppointmentSlotReportSchedulingTypeEnum || (exports.AppointmentSlotReportSchedulingTypeEnum = AppointmentSlotReportSchedulingTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociatedItemItemStatusEnum;
(function (AssociatedItemItemStatusEnum) {
    AssociatedItemItemStatusEnum["Active"] = "ACTIVE";
    AssociatedItemItemStatusEnum["Cancelled"] = "CANCELLED";
    AssociatedItemItemStatusEnum["Shipped"] = "SHIPPED";
    AssociatedItemItemStatusEnum["Delivered"] = "DELIVERED";
})(AssociatedItemItemStatusEnum || (exports.AssociatedItemItemStatusEnum = AssociatedItemItemStatusEnum = {}));
/**
 * Type of capacity
 * @export
 * @enum {string}
 */
var CapacityType;
(function (CapacityType) {
    CapacityType["ScheduledCapacity"] = "SCHEDULED_CAPACITY";
    CapacityType["AvailableCapacity"] = "AVAILABLE_CAPACITY";
    CapacityType["EncumberedCapacity"] = "ENCUMBERED_CAPACITY";
    CapacityType["ReservedCapacity"] = "RESERVED_CAPACITY";
})(CapacityType || (exports.CapacityType = CapacityType = {}));
/**
 * The day of the week.
 * @export
 * @enum {string}
 */
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["Monday"] = "MONDAY";
    DayOfWeek["Tuesday"] = "TUESDAY";
    DayOfWeek["Wednesday"] = "WEDNESDAY";
    DayOfWeek["Thursday"] = "THURSDAY";
    DayOfWeek["Friday"] = "FRIDAY";
    DayOfWeek["Saturday"] = "SATURDAY";
    DayOfWeek["Sunday"] = "SUNDAY";
})(DayOfWeek || (exports.DayOfWeek = DayOfWeek = {}));
/**
    * @export
    * @enum {string}
    */
var EncryptionDetailsStandardEnum;
(function (EncryptionDetailsStandardEnum) {
    EncryptionDetailsStandardEnum["Aes"] = "AES";
})(EncryptionDetailsStandardEnum || (exports.EncryptionDetailsStandardEnum = EncryptionDetailsStandardEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ModelErrorErrorLevelEnum;
(function (ModelErrorErrorLevelEnum) {
    ModelErrorErrorLevelEnum["Error"] = "ERROR";
    ModelErrorErrorLevelEnum["Warning"] = "WARNING";
})(ModelErrorErrorLevelEnum || (exports.ModelErrorErrorLevelEnum = ModelErrorErrorLevelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PoaPoaTypeEnum;
(function (PoaPoaTypeEnum) {
    PoaPoaTypeEnum["NoSignatureDummyPos"] = "NO_SIGNATURE_DUMMY_POS";
    PoaPoaTypeEnum["CustomerSignature"] = "CUSTOMER_SIGNATURE";
    PoaPoaTypeEnum["DummyReceipt"] = "DUMMY_RECEIPT";
    PoaPoaTypeEnum["PoaReceipt"] = "POA_RECEIPT";
})(PoaPoaTypeEnum || (exports.PoaPoaTypeEnum = PoaPoaTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReservationTypeEnum;
(function (ReservationTypeEnum) {
    ReservationTypeEnum["Appointment"] = "APPOINTMENT";
    ReservationTypeEnum["Travel"] = "TRAVEL";
    ReservationTypeEnum["Vacation"] = "VACATION";
    ReservationTypeEnum["Break"] = "BREAK";
    ReservationTypeEnum["Training"] = "TRAINING";
})(ReservationTypeEnum || (exports.ReservationTypeEnum = ReservationTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ServiceJobServiceJobStatusEnum;
(function (ServiceJobServiceJobStatusEnum) {
    ServiceJobServiceJobStatusEnum["NotServiced"] = "NOT_SERVICED";
    ServiceJobServiceJobStatusEnum["Cancelled"] = "CANCELLED";
    ServiceJobServiceJobStatusEnum["Completed"] = "COMPLETED";
    ServiceJobServiceJobStatusEnum["PendingSchedule"] = "PENDING_SCHEDULE";
    ServiceJobServiceJobStatusEnum["NotFulfillable"] = "NOT_FULFILLABLE";
    ServiceJobServiceJobStatusEnum["Hold"] = "HOLD";
    ServiceJobServiceJobStatusEnum["PaymentDeclined"] = "PAYMENT_DECLINED";
})(ServiceJobServiceJobStatusEnum || (exports.ServiceJobServiceJobStatusEnum = ServiceJobServiceJobStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ServiceLocationServiceLocationTypeEnum;
(function (ServiceLocationServiceLocationTypeEnum) {
    ServiceLocationServiceLocationTypeEnum["InHome"] = "IN_HOME";
    ServiceLocationServiceLocationTypeEnum["InStore"] = "IN_STORE";
    ServiceLocationServiceLocationTypeEnum["Online"] = "ONLINE";
})(ServiceLocationServiceLocationTypeEnum || (exports.ServiceLocationServiceLocationTypeEnum = ServiceLocationServiceLocationTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ServiceUploadDocumentContentTypeEnum;
(function (ServiceUploadDocumentContentTypeEnum) {
    ServiceUploadDocumentContentTypeEnum["Tiff"] = "TIFF";
    ServiceUploadDocumentContentTypeEnum["Jpg"] = "JPG";
    ServiceUploadDocumentContentTypeEnum["Png"] = "PNG";
    ServiceUploadDocumentContentTypeEnum["Jpeg"] = "JPEG";
    ServiceUploadDocumentContentTypeEnum["Gif"] = "GIF";
    ServiceUploadDocumentContentTypeEnum["Pdf"] = "PDF";
})(ServiceUploadDocumentContentTypeEnum || (exports.ServiceUploadDocumentContentTypeEnum = ServiceUploadDocumentContentTypeEnum = {}));
/**
 * ServiceApi - axios parameter creator
 * @export
 */
const ServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentForServiceJobByServiceJobId: async (serviceJobId, body, options = {}) => {
            // verify required parameter 'serviceJobId' is not null or undefined
            (0, common_1.assertParamExists)('addAppointmentForServiceJobByServiceJobId', 'serviceJobId', serviceJobId);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('addAppointmentForServiceJobByServiceJobId', 'body', body);
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {AssignAppointmentResourcesRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAppointmentResources: async (serviceJobId, appointmentId, body, options = {}) => {
            // verify required parameter 'serviceJobId' is not null or undefined
            (0, common_1.assertParamExists)('assignAppointmentResources', 'serviceJobId', serviceJobId);
            // verify required parameter 'appointmentId' is not null or undefined
            (0, common_1.assertParamExists)('assignAppointmentResources', 'appointmentId', appointmentId);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('assignAppointmentResources', 'body', body);
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReservation: async (reservationId, marketplaceIds, options = {}) => {
            // verify required parameter 'reservationId' is not null or undefined
            (0, common_1.assertParamExists)('cancelReservation', 'reservationId', reservationId);
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('cancelReservation', 'marketplaceIds', marketplaceIds);
            const localVarPath = `/service/v1/reservation/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelServiceJobByServiceJobId: async (serviceJobId, cancellationReasonCode, options = {}) => {
            // verify required parameter 'serviceJobId' is not null or undefined
            (0, common_1.assertParamExists)('cancelServiceJobByServiceJobId', 'serviceJobId', serviceJobId);
            // verify required parameter 'cancellationReasonCode' is not null or undefined
            (0, common_1.assertParamExists)('cancelServiceJobByServiceJobId', 'cancellationReasonCode', cancellationReasonCode);
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/cancellations`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (cancellationReasonCode !== undefined) {
                localVarQueryParameter['cancellationReasonCode'] = cancellationReasonCode;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeServiceJobByServiceJobId: async (serviceJobId, options = {}) => {
            // verify required parameter 'serviceJobId' is not null or undefined
            (0, common_1.assertParamExists)('completeServiceJobByServiceJobId', 'serviceJobId', serviceJobId);
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/completions`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {CreateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation: async (marketplaceIds, body, options = {}) => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('createReservation', 'marketplaceIds', marketplaceIds);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('createReservation', 'body', body);
            const localVarPath = `/service/v1/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceUploadDocument} body Upload document operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDocumentUploadDestination: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('createServiceDocumentUploadDestination', 'body', body);
            const localVarPath = `/service/v1/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin ASIN associated with the service.
         * @param {string} storeId Store identifier defining the region scope to retrive appointment slots.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentSlots: async (asin, storeId, marketplaceIds, startTime, endTime, options = {}) => {
            // verify required parameter 'asin' is not null or undefined
            (0, common_1.assertParamExists)('getAppointmentSlots', 'asin', asin);
            // verify required parameter 'storeId' is not null or undefined
            (0, common_1.assertParamExists)('getAppointmentSlots', 'storeId', storeId);
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('getAppointmentSlots', 'marketplaceIds', marketplaceIds);
            const localVarPath = `/service/v1/appointmentSlots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (asin !== undefined) {
                localVarQueryParameter['asin'] = asin;
            }
            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }
            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier to retrive appointment slots for associated service.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmmentSlotsByJobId: async (serviceJobId, marketplaceIds, startTime, endTime, options = {}) => {
            // verify required parameter 'serviceJobId' is not null or undefined
            (0, common_1.assertParamExists)('getAppointmmentSlotsByJobId', 'serviceJobId', serviceJobId);
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('getAppointmmentSlotsByJobId', 'marketplaceIds', marketplaceIds);
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointmentSlots`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }
            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {FixedSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFixedSlotCapacity: async (resourceId, marketplaceIds, body, nextPageToken, options = {}) => {
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('getFixedSlotCapacity', 'resourceId', resourceId);
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('getFixedSlotCapacity', 'marketplaceIds', marketplaceIds);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('getFixedSlotCapacity', 'body', body);
            const localVarPath = `/service/v1/serviceResources/{resourceId}/capacity/fixed`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {RangeSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRangeSlotCapacity: async (resourceId, marketplaceIds, body, nextPageToken, options = {}) => {
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('getRangeSlotCapacity', 'resourceId', resourceId);
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('getRangeSlotCapacity', 'marketplaceIds', marketplaceIds);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('getRangeSlotCapacity', 'body', body);
            const localVarPath = `/service/v1/serviceResources/{resourceId}/capacity/range`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobByServiceJobId: async (serviceJobId, options = {}) => {
            // verify required parameter 'serviceJobId' is not null or undefined
            (0, common_1.assertParamExists)('getServiceJobByServiceJobId', 'serviceJobId', serviceJobId);
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20.
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [createdBefore] A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {Array<string>} [asins] List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
         * @param {Array<string>} [requiredSkills] A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
         * @param {Array<string>} [storeIds] List of Amazon-defined identifiers for the region scope. Max values supported is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobs: async (marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds, options = {}) => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('getServiceJobs', 'marketplaceIds', marketplaceIds);
            const localVarPath = `/service/v1/serviceJobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (serviceOrderIds) {
                localVarQueryParameter['serviceOrderIds'] = serviceOrderIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (serviceJobStatus) {
                localVarQueryParameter['serviceJobStatus'] = serviceJobStatus.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = createdAfter;
            }
            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = createdBefore;
            }
            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['lastUpdatedAfter'] = lastUpdatedAfter;
            }
            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['lastUpdatedBefore'] = lastUpdatedBefore;
            }
            if (scheduleStartDate !== undefined) {
                localVarQueryParameter['scheduleStartDate'] = scheduleStartDate;
            }
            if (scheduleEndDate !== undefined) {
                localVarQueryParameter['scheduleEndDate'] = scheduleEndDate;
            }
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (asins) {
                localVarQueryParameter['asins'] = asins.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (requiredSkills) {
                localVarQueryParameter['requiredSkills'] = requiredSkills.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (storeIds) {
                localVarQueryParameter['storeIds'] = storeIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentForServiceJobByServiceJobId: async (serviceJobId, appointmentId, body, options = {}) => {
            // verify required parameter 'serviceJobId' is not null or undefined
            (0, common_1.assertParamExists)('rescheduleAppointmentForServiceJobByServiceJobId', 'serviceJobId', serviceJobId);
            // verify required parameter 'appointmentId' is not null or undefined
            (0, common_1.assertParamExists)('rescheduleAppointmentForServiceJobByServiceJobId', 'appointmentId', appointmentId);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('rescheduleAppointmentForServiceJobByServiceJobId', 'body', body);
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppointmentFulfillmentData: async (serviceJobId, appointmentId, body, options = {}) => {
            // verify required parameter 'serviceJobId' is not null or undefined
            (0, common_1.assertParamExists)('setAppointmentFulfillmentData', 'serviceJobId', serviceJobId);
            // verify required parameter 'appointmentId' is not null or undefined
            (0, common_1.assertParamExists)('setAppointmentFulfillmentData', 'appointmentId', appointmentId);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('setAppointmentFulfillmentData', 'body', body);
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation: async (reservationId, marketplaceIds, body, options = {}) => {
            // verify required parameter 'reservationId' is not null or undefined
            (0, common_1.assertParamExists)('updateReservation', 'reservationId', reservationId);
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('updateReservation', 'marketplaceIds', marketplaceIds);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('updateReservation', 'body', body);
            const localVarPath = `/service/v1/reservation/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource (store) Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateScheduleRequest} body Schedule details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (resourceId, marketplaceIds, body, options = {}) => {
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('updateSchedule', 'resourceId', resourceId);
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('updateSchedule', 'marketplaceIds', marketplaceIds);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('updateSchedule', 'body', body);
            const localVarPath = `/service/v1/serviceResources/{resourceId}/schedules`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ServiceApiAxiosParamCreator = ServiceApiAxiosParamCreator;
/**
 * ServiceApi - functional programming interface
 * @export
 */
const ServiceApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ServiceApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {AssignAppointmentResourcesRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignAppointmentResources(serviceJobId, appointmentId, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignAppointmentResources(serviceJobId, appointmentId, body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelReservation(reservationId, marketplaceIds, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelReservation(reservationId, marketplaceIds, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeServiceJobByServiceJobId(serviceJobId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeServiceJobByServiceJobId(serviceJobId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {CreateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReservation(marketplaceIds, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReservation(marketplaceIds, body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceUploadDocument} body Upload document operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceDocumentUploadDestination(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceDocumentUploadDestination(body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin ASIN associated with the service.
         * @param {string} storeId Store identifier defining the region scope to retrive appointment slots.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentSlots(asin, storeId, marketplaceIds, startTime, endTime, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmentSlots(asin, storeId, marketplaceIds, startTime, endTime, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier to retrive appointment slots for associated service.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, startTime, endTime, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, startTime, endTime, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {FixedSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFixedSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFixedSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {RangeSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRangeSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRangeSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJobByServiceJobId(serviceJobId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceJobByServiceJobId(serviceJobId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20.
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [createdBefore] A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {Array<string>} [asins] List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
         * @param {Array<string>} [requiredSkills] A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
         * @param {Array<string>} [storeIds] List of Amazon-defined identifiers for the region scope. Max values supported is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAppointmentFulfillmentData(serviceJobId, appointmentId, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAppointmentFulfillmentData(serviceJobId, appointmentId, body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReservation(reservationId, marketplaceIds, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReservation(reservationId, marketplaceIds, body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource (store) Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateScheduleRequest} body Schedule details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(resourceId, marketplaceIds, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(resourceId, marketplaceIds, body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ServiceApiFp = ServiceApiFp;
/**
 * ServiceApi - factory interface
 * @export
 */
const ServiceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ServiceApiFp)(configuration);
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options) {
            return localVarFp.addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {AssignAppointmentResourcesRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAppointmentResources(serviceJobId, appointmentId, body, options) {
            return localVarFp.assignAppointmentResources(serviceJobId, appointmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReservation(reservationId, marketplaceIds, options) {
            return localVarFp.cancelReservation(reservationId, marketplaceIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options) {
            return localVarFp.cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeServiceJobByServiceJobId(serviceJobId, options) {
            return localVarFp.completeServiceJobByServiceJobId(serviceJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {CreateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation(marketplaceIds, body, options) {
            return localVarFp.createReservation(marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceUploadDocument} body Upload document operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDocumentUploadDestination(body, options) {
            return localVarFp.createServiceDocumentUploadDestination(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin ASIN associated with the service.
         * @param {string} storeId Store identifier defining the region scope to retrive appointment slots.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentSlots(asin, storeId, marketplaceIds, startTime, endTime, options) {
            return localVarFp.getAppointmentSlots(asin, storeId, marketplaceIds, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier to retrive appointment slots for associated service.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, startTime, endTime, options) {
            return localVarFp.getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {FixedSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFixedSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options) {
            return localVarFp.getFixedSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {RangeSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRangeSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options) {
            return localVarFp.getRangeSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobByServiceJobId(serviceJobId, options) {
            return localVarFp.getServiceJobByServiceJobId(serviceJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20.
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [createdBefore] A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {Array<string>} [asins] List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
         * @param {Array<string>} [requiredSkills] A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
         * @param {Array<string>} [storeIds] List of Amazon-defined identifiers for the region scope. Max values supported is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds, options) {
            return localVarFp.getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options) {
            return localVarFp.rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppointmentFulfillmentData(serviceJobId, appointmentId, body, options) {
            return localVarFp.setAppointmentFulfillmentData(serviceJobId, appointmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation(reservationId, marketplaceIds, body, options) {
            return localVarFp.updateReservation(reservationId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource (store) Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateScheduleRequest} body Schedule details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(resourceId, marketplaceIds, body, options) {
            return localVarFp.updateSchedule(resourceId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ServiceApiFactory = ServiceApiFactory;
/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
class ServiceApi extends base_1.BaseAPI {
    /**
     * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    addAppointmentForServiceJobByServiceJobId(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).addAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiAssignAppointmentResourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    assignAppointmentResources(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).assignAppointmentResources(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCancelReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    cancelReservation(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).cancelReservation(requestParameters.reservationId, requestParameters.marketplaceIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCancelServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    cancelServiceJobByServiceJobId(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).cancelServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.cancellationReasonCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCompleteServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    completeServiceJobByServiceJobId(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).completeServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCreateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    createReservation(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).createReservation(requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCreateServiceDocumentUploadDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    createServiceDocumentUploadDestination(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).createServiceDocumentUploadDestination(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getAppointmentSlots(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).getAppointmentSlots(requestParameters.asin, requestParameters.storeId, requestParameters.marketplaceIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetAppointmmentSlotsByJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getAppointmmentSlotsByJobId(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).getAppointmmentSlotsByJobId(requestParameters.serviceJobId, requestParameters.marketplaceIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetFixedSlotCapacityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getFixedSlotCapacity(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).getFixedSlotCapacity(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, requestParameters.nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetRangeSlotCapacityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getRangeSlotCapacity(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).getRangeSlotCapacity(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, requestParameters.nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getServiceJobByServiceJobId(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).getServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetServiceJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getServiceJobs(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).getServiceJobs(requestParameters.marketplaceIds, requestParameters.serviceOrderIds, requestParameters.serviceJobStatus, requestParameters.pageToken, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortOrder, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.scheduleStartDate, requestParameters.scheduleEndDate, requestParameters.asins, requestParameters.requiredSkills, requestParameters.storeIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    rescheduleAppointmentForServiceJobByServiceJobId(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).rescheduleAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiSetAppointmentFulfillmentDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    setAppointmentFulfillmentData(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).setAppointmentFulfillmentData(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiUpdateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    updateReservation(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).updateReservation(requestParameters.reservationId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiUpdateScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    updateSchedule(requestParameters, options) {
        return (0, exports.ServiceApiFp)(this.configuration).updateSchedule(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ServiceApi = ServiceApi;
//# sourceMappingURL=api.js.map
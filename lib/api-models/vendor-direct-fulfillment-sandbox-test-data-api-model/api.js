"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Vendor Direct Fulfillment Sandbox Test Data
 * The Selling Partner API for Vendor Direct Fulfillment Sandbox Test Data provides programmatic access to vendor direct fulfillment sandbox test data.
 *
 * The version of the OpenAPI document: 2021-10-28
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VendorDFSandboxtransactionstatusApi = exports.VendorDFSandboxtransactionstatusApiFactory = exports.VendorDFSandboxtransactionstatusApiFp = exports.VendorDFSandboxtransactionstatusApiAxiosParamCreator = exports.VendorDFSandboxApi = exports.VendorDFSandboxApiFactory = exports.VendorDFSandboxApiFp = exports.VendorDFSandboxApiAxiosParamCreator = exports.TransactionStatusEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var TransactionStatusEnum;
(function (TransactionStatusEnum) {
    TransactionStatusEnum["Failure"] = "FAILURE";
    TransactionStatusEnum["Processing"] = "PROCESSING";
    TransactionStatusEnum["Success"] = "SUCCESS";
})(TransactionStatusEnum || (exports.TransactionStatusEnum = TransactionStatusEnum = {}));
/**
 * VendorDFSandboxApi - axios parameter creator
 * @export
 */
const VendorDFSandboxApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Submits a request to generate test order data for Vendor Direct Fulfillment API entities.
         * @param {GenerateOrderScenarioRequest} body The request payload that contain parameters to generate test order data scenarios.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderScenarios: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('generateOrderScenarios', 'body', body);
            const localVarPath = `/vendor/directFulfillment/sandbox/2021-10-28/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.VendorDFSandboxApiAxiosParamCreator = VendorDFSandboxApiAxiosParamCreator;
/**
 * VendorDFSandboxApi - functional programming interface
 * @export
 */
const VendorDFSandboxApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VendorDFSandboxApiAxiosParamCreator)(configuration);
    return {
        /**
         * Submits a request to generate test order data for Vendor Direct Fulfillment API entities.
         * @param {GenerateOrderScenarioRequest} body The request payload that contain parameters to generate test order data scenarios.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateOrderScenarios(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateOrderScenarios(body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.VendorDFSandboxApiFp = VendorDFSandboxApiFp;
/**
 * VendorDFSandboxApi - factory interface
 * @export
 */
const VendorDFSandboxApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VendorDFSandboxApiFp)(configuration);
    return {
        /**
         * Submits a request to generate test order data for Vendor Direct Fulfillment API entities.
         * @param {GenerateOrderScenarioRequest} body The request payload that contain parameters to generate test order data scenarios.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderScenarios(body, options) {
            return localVarFp.generateOrderScenarios(body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VendorDFSandboxApiFactory = VendorDFSandboxApiFactory;
/**
 * VendorDFSandboxApi - object-oriented interface
 * @export
 * @class VendorDFSandboxApi
 * @extends {BaseAPI}
 */
class VendorDFSandboxApi extends base_1.BaseAPI {
    /**
     * Submits a request to generate test order data for Vendor Direct Fulfillment API entities.
     * @param {VendorDFSandboxApiGenerateOrderScenariosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorDFSandboxApi
     */
    generateOrderScenarios(requestParameters, options) {
        return (0, exports.VendorDFSandboxApiFp)(this.configuration).generateOrderScenarios(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VendorDFSandboxApi = VendorDFSandboxApi;
/**
 * VendorDFSandboxtransactionstatusApi - axios parameter creator
 * @export
 */
const VendorDFSandboxtransactionstatusApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves the transaction status identified by the specified `transactionId`, and returns the requested test order data if the transaction is successful.
         * @param {string} transactionId The transaction identifier returned in the response for the &#x60;generateOrderScenarios&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderScenarios: async (transactionId, options = {}) => {
            // verify required parameter 'transactionId' is not null or undefined
            (0, common_1.assertParamExists)('getOrderScenarios', 'transactionId', transactionId);
            const localVarPath = `/vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.VendorDFSandboxtransactionstatusApiAxiosParamCreator = VendorDFSandboxtransactionstatusApiAxiosParamCreator;
/**
 * VendorDFSandboxtransactionstatusApi - functional programming interface
 * @export
 */
const VendorDFSandboxtransactionstatusApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VendorDFSandboxtransactionstatusApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieves the transaction status identified by the specified `transactionId`, and returns the requested test order data if the transaction is successful.
         * @param {string} transactionId The transaction identifier returned in the response for the &#x60;generateOrderScenarios&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderScenarios(transactionId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderScenarios(transactionId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.VendorDFSandboxtransactionstatusApiFp = VendorDFSandboxtransactionstatusApiFp;
/**
 * VendorDFSandboxtransactionstatusApi - factory interface
 * @export
 */
const VendorDFSandboxtransactionstatusApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VendorDFSandboxtransactionstatusApiFp)(configuration);
    return {
        /**
         * Retrieves the transaction status identified by the specified `transactionId`, and returns the requested test order data if the transaction is successful.
         * @param {string} transactionId The transaction identifier returned in the response for the &#x60;generateOrderScenarios&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderScenarios(transactionId, options) {
            return localVarFp.getOrderScenarios(transactionId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VendorDFSandboxtransactionstatusApiFactory = VendorDFSandboxtransactionstatusApiFactory;
/**
 * VendorDFSandboxtransactionstatusApi - object-oriented interface
 * @export
 * @class VendorDFSandboxtransactionstatusApi
 * @extends {BaseAPI}
 */
class VendorDFSandboxtransactionstatusApi extends base_1.BaseAPI {
    /**
     * Retrieves the transaction status identified by the specified `transactionId`, and returns the requested test order data if the transaction is successful.
     * @param {VendorDFSandboxtransactionstatusApiGetOrderScenariosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorDFSandboxtransactionstatusApi
     */
    getOrderScenarios(requestParameters, options) {
        return (0, exports.VendorDFSandboxtransactionstatusApiFp)(this.configuration).getOrderScenarios(requestParameters.transactionId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VendorDFSandboxtransactionstatusApi = VendorDFSandboxtransactionstatusApi;
//# sourceMappingURL=api.js.map
/**
 * Selling Partner API for Direct Fulfillment Transaction Status
 * The Selling Partner API for Direct Fulfillment Transaction Status provides programmatic access to a direct fulfillment vendor\'s transaction status.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * The response schema for the `getTransactionStatus` operation.
 * @export
 * @interface GetTransactionResponse
 */
export interface GetTransactionResponse {
    /**
     *
     * @type {TransactionStatus}
     * @memberof GetTransactionResponse
     */
    payload?: TransactionStatus;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetTransactionResponse
     */
    errors?: Array<Error>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The transaction status details.
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * The unique identifier sent in the \'transactionId\' field in response to the post request of a specific transaction.
     * @type {string}
     * @memberof Transaction
     */
    transactionId: string;
    /**
     * Current processing status of the transaction.
     * @type {string}
     * @memberof Transaction
     */
    status: TransactionStatusEnum | 'Failure' | 'Processing' | 'Success';
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof Transaction
     */
    errors?: Array<Error>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TransactionStatusEnum {
    Failure = "Failure",
    Processing = "Processing",
    Success = "Success"
}
/**
 * The payload for the `getTransactionStatus` operation.
 * @export
 * @interface TransactionStatus
 */
export interface TransactionStatus {
    /**
     *
     * @type {Transaction}
     * @memberof TransactionStatus
     */
    transactionStatus?: Transaction;
}
/**
 * VendorTransactionApi - axios parameter creator
 * @export
 */
export declare const VendorTransactionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns the status of the transaction indicated by the specified `transactionId`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} transactionId Previously returned in the response to the POST request of a specific transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionStatus: (transactionId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * VendorTransactionApi - functional programming interface
 * @export
 */
export declare const VendorTransactionApiFp: (configuration?: Configuration) => {
    /**
     * Returns the status of the transaction indicated by the specified `transactionId`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} transactionId Previously returned in the response to the POST request of a specific transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionStatus(transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTransactionResponse>>;
};
/**
 * VendorTransactionApi - factory interface
 * @export
 */
export declare const VendorTransactionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns the status of the transaction indicated by the specified `transactionId`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} transactionId Previously returned in the response to the POST request of a specific transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionStatus(transactionId: string, options?: any): AxiosPromise<GetTransactionResponse>;
};
/**
 * Request parameters for getTransactionStatus operation in VendorTransactionApi.
 * @export
 * @interface VendorTransactionApiGetTransactionStatusRequest
 */
export interface VendorTransactionApiGetTransactionStatusRequest {
    /**
     * Previously returned in the response to the POST request of a specific transaction.
     * @type {string}
     * @memberof VendorTransactionApiGetTransactionStatus
     */
    readonly transactionId: string;
}
/**
 * VendorTransactionApi - object-oriented interface
 * @export
 * @class VendorTransactionApi
 * @extends {BaseAPI}
 */
export declare class VendorTransactionApi extends BaseAPI {
    /**
     * Returns the status of the transaction indicated by the specified `transactionId`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorTransactionApiGetTransactionStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorTransactionApi
     */
    getTransactionStatus(requestParameters: VendorTransactionApiGetTransactionStatusRequest, options?: any): Promise<import("axios").AxiosResponse<GetTransactionResponse, any>>;
}

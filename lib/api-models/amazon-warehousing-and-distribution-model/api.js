"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for AWD
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD).
 *
 * The version of the OpenAPI document: 2024-05-09
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwdApi = exports.AwdApiFactory = exports.AwdApiFp = exports.AwdApiAxiosParamCreator = exports.WeightUnitOfMeasurement = exports.VolumeUnitOfMeasurement = exports.SortOrder = exports.ShipmentSortableField = exports.InventoryUnitOfMeasurement = exports.InventoryDetailsVisibility = exports.InboundShipmentStatus = exports.DistributionPackageType = exports.DimensionUnitOfMeasurement = exports.CarrierCodeType = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * Denotes the type for the carrier.
 * @export
 * @enum {string}
 */
var CarrierCodeType;
(function (CarrierCodeType) {
    CarrierCodeType["Scac"] = "SCAC";
})(CarrierCodeType || (exports.CarrierCodeType = CarrierCodeType = {}));
/**
 * Unit of measurement for package dimensions.
 * @export
 * @enum {string}
 */
var DimensionUnitOfMeasurement;
(function (DimensionUnitOfMeasurement) {
    DimensionUnitOfMeasurement["Inches"] = "INCHES";
    DimensionUnitOfMeasurement["Centimeters"] = "CENTIMETERS";
})(DimensionUnitOfMeasurement || (exports.DimensionUnitOfMeasurement = DimensionUnitOfMeasurement = {}));
/**
 * Type of distribution packages.
 * @export
 * @enum {string}
 */
var DistributionPackageType;
(function (DistributionPackageType) {
    DistributionPackageType["Case"] = "CASE";
    DistributionPackageType["Pallet"] = "PALLET";
})(DistributionPackageType || (exports.DistributionPackageType = DistributionPackageType = {}));
/**
 * Possible shipment statuses used by shipments.
 * @export
 * @enum {string}
 */
var InboundShipmentStatus;
(function (InboundShipmentStatus) {
    InboundShipmentStatus["Created"] = "CREATED";
    InboundShipmentStatus["Shipped"] = "SHIPPED";
    InboundShipmentStatus["InTransit"] = "IN_TRANSIT";
    InboundShipmentStatus["Receiving"] = "RECEIVING";
    InboundShipmentStatus["Delivered"] = "DELIVERED";
    InboundShipmentStatus["Closed"] = "CLOSED";
    InboundShipmentStatus["Cancelled"] = "CANCELLED";
})(InboundShipmentStatus || (exports.InboundShipmentStatus = InboundShipmentStatus = {}));
/**
 * Enum to specify if returned summaries should include additional summarized inventory details and quantities.
 * @export
 * @enum {string}
 */
var InventoryDetailsVisibility;
(function (InventoryDetailsVisibility) {
    InventoryDetailsVisibility["Show"] = "SHOW";
    InventoryDetailsVisibility["Hide"] = "HIDE";
})(InventoryDetailsVisibility || (exports.InventoryDetailsVisibility = InventoryDetailsVisibility = {}));
/**
 * Unit of measurement for the inventory.
 * @export
 * @enum {string}
 */
var InventoryUnitOfMeasurement;
(function (InventoryUnitOfMeasurement) {
    InventoryUnitOfMeasurement["ProductUnits"] = "PRODUCT_UNITS";
    InventoryUnitOfMeasurement["Cases"] = "CASES";
    InventoryUnitOfMeasurement["Pallets"] = "PALLETS";
})(InventoryUnitOfMeasurement || (exports.InventoryUnitOfMeasurement = InventoryUnitOfMeasurement = {}));
/**
 * Denotes the field name on which the shipments are to be sorted.
 * @export
 * @enum {string}
 */
var ShipmentSortableField;
(function (ShipmentSortableField) {
    ShipmentSortableField["UpdatedAt"] = "UPDATED_AT";
    ShipmentSortableField["CreatedAt"] = "CREATED_AT";
})(ShipmentSortableField || (exports.ShipmentSortableField = ShipmentSortableField = {}));
/**
 * Sort order for a collection of items. For example, order or shipment.
 * @export
 * @enum {string}
 */
var SortOrder;
(function (SortOrder) {
    SortOrder["Ascending"] = "ASCENDING";
    SortOrder["Descending"] = "DESCENDING";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
/**
 * Unit of measurement for the package volume.
 * @export
 * @enum {string}
 */
var VolumeUnitOfMeasurement;
(function (VolumeUnitOfMeasurement) {
    VolumeUnitOfMeasurement["CuIn"] = "CU_IN";
    VolumeUnitOfMeasurement["Cbm"] = "CBM";
    VolumeUnitOfMeasurement["Cc"] = "CC";
})(VolumeUnitOfMeasurement || (exports.VolumeUnitOfMeasurement = VolumeUnitOfMeasurement = {}));
/**
 * Unit of measurement for the package weight.
 * @export
 * @enum {string}
 */
var WeightUnitOfMeasurement;
(function (WeightUnitOfMeasurement) {
    WeightUnitOfMeasurement["Pounds"] = "POUNDS";
    WeightUnitOfMeasurement["Kilograms"] = "KILOGRAMS";
})(WeightUnitOfMeasurement || (exports.WeightUnitOfMeasurement = WeightUnitOfMeasurement = {}));
/**
 * AwdApi - axios parameter creator
 * @export
 */
const AwdApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves an AWD inbound shipment.
         * @param {string} shipmentId ID for the shipment. A shipment contains the cases being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundShipment: async (shipmentId, options = {}) => {
            // verify required parameter 'shipmentId' is not null or undefined
            (0, common_1.assertParamExists)('getInboundShipment', 'shipmentId', shipmentId);
            const localVarPath = `/awd/2024-05-09/inboundShipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a summary for all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.
         * @param {'UPDATED_AT' | 'CREATED_AT'} [sortBy] Field to sort results by. Required if &#x60;sortOrder&#x60; is provided.
         * @param {'ASCENDING' | 'DESCENDING'} [sortOrder] Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
         * @param {'CREATED' | 'SHIPPED' | 'IN_TRANSIT' | 'RECEIVING' | 'DELIVERED' | 'CLOSED' | 'CANCELLED'} [shipmentStatus] Filter by inbound shipment status.
         * @param {string} [updatedAfter] List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [updatedBefore] List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {string} [nextToken] Token to retrieve the next set of paginated results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundShipments: async (sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken, options = {}) => {
            const localVarPath = `/awd/2024-05-09/inboundShipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            if (shipmentStatus !== undefined) {
                localVarQueryParameter['shipmentStatus'] = shipmentStatus;
            }
            if (updatedAfter !== undefined) {
                localVarQueryParameter['updatedAfter'] = (updatedAfter instanceof Date) ?
                    updatedAfter.toISOString() :
                    updatedAfter;
            }
            if (updatedBefore !== undefined) {
                localVarQueryParameter['updatedBefore'] = (updatedBefore instanceof Date) ?
                    updatedBefore.toISOString() :
                    updatedBefore;
            }
            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }
            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists AWD inventory associated with a merchant with the ability to apply optional filters.
         * @param {string} [sku] Filter by seller or merchant SKU for the item.
         * @param {'ASCENDING' | 'DESCENDING'} [sortOrder] Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
         * @param {'SHOW' | 'HIDE'} [details] Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals.
         * @param {string} [nextToken] Token to retrieve the next set of paginated results.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory: async (sku, sortOrder, details, nextToken, maxResults, options = {}) => {
            const localVarPath = `/awd/2024-05-09/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }
            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AwdApiAxiosParamCreator = AwdApiAxiosParamCreator;
/**
 * AwdApi - functional programming interface
 * @export
 */
const AwdApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AwdApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieves an AWD inbound shipment.
         * @param {string} shipmentId ID for the shipment. A shipment contains the cases being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundShipment(shipmentId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundShipment(shipmentId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieves a summary for all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.
         * @param {'UPDATED_AT' | 'CREATED_AT'} [sortBy] Field to sort results by. Required if &#x60;sortOrder&#x60; is provided.
         * @param {'ASCENDING' | 'DESCENDING'} [sortOrder] Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
         * @param {'CREATED' | 'SHIPPED' | 'IN_TRANSIT' | 'RECEIVING' | 'DELIVERED' | 'CLOSED' | 'CANCELLED'} [shipmentStatus] Filter by inbound shipment status.
         * @param {string} [updatedAfter] List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [updatedBefore] List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {string} [nextToken] Token to retrieve the next set of paginated results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundShipments(sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundShipments(sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists AWD inventory associated with a merchant with the ability to apply optional filters.
         * @param {string} [sku] Filter by seller or merchant SKU for the item.
         * @param {'ASCENDING' | 'DESCENDING'} [sortOrder] Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
         * @param {'SHOW' | 'HIDE'} [details] Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals.
         * @param {string} [nextToken] Token to retrieve the next set of paginated results.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInventory(sku, sortOrder, details, nextToken, maxResults, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInventory(sku, sortOrder, details, nextToken, maxResults, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.AwdApiFp = AwdApiFp;
/**
 * AwdApi - factory interface
 * @export
 */
const AwdApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AwdApiFp)(configuration);
    return {
        /**
         * Retrieves an AWD inbound shipment.
         * @param {string} shipmentId ID for the shipment. A shipment contains the cases being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundShipment(shipmentId, options) {
            return localVarFp.getInboundShipment(shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a summary for all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.
         * @param {'UPDATED_AT' | 'CREATED_AT'} [sortBy] Field to sort results by. Required if &#x60;sortOrder&#x60; is provided.
         * @param {'ASCENDING' | 'DESCENDING'} [sortOrder] Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
         * @param {'CREATED' | 'SHIPPED' | 'IN_TRANSIT' | 'RECEIVING' | 'DELIVERED' | 'CLOSED' | 'CANCELLED'} [shipmentStatus] Filter by inbound shipment status.
         * @param {string} [updatedAfter] List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [updatedBefore] List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {string} [nextToken] Token to retrieve the next set of paginated results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundShipments(sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken, options) {
            return localVarFp.listInboundShipments(sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists AWD inventory associated with a merchant with the ability to apply optional filters.
         * @param {string} [sku] Filter by seller or merchant SKU for the item.
         * @param {'ASCENDING' | 'DESCENDING'} [sortOrder] Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
         * @param {'SHOW' | 'HIDE'} [details] Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals.
         * @param {string} [nextToken] Token to retrieve the next set of paginated results.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory(sku, sortOrder, details, nextToken, maxResults, options) {
            return localVarFp.listInventory(sku, sortOrder, details, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AwdApiFactory = AwdApiFactory;
/**
 * AwdApi - object-oriented interface
 * @export
 * @class AwdApi
 * @extends {BaseAPI}
 */
class AwdApi extends base_1.BaseAPI {
    /**
     * Retrieves an AWD inbound shipment.
     * @param {AwdApiGetInboundShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwdApi
     */
    getInboundShipment(requestParameters, options) {
        return (0, exports.AwdApiFp)(this.configuration).getInboundShipment(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a summary for all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.
     * @param {AwdApiListInboundShipmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwdApi
     */
    listInboundShipments(requestParameters = {}, options) {
        return (0, exports.AwdApiFp)(this.configuration).listInboundShipments(requestParameters.sortBy, requestParameters.sortOrder, requestParameters.shipmentStatus, requestParameters.updatedAfter, requestParameters.updatedBefore, requestParameters.maxResults, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists AWD inventory associated with a merchant with the ability to apply optional filters.
     * @param {AwdApiListInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwdApi
     */
    listInventory(requestParameters = {}, options) {
        return (0, exports.AwdApiFp)(this.configuration).listInventory(requestParameters.sku, requestParameters.sortOrder, requestParameters.details, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AwdApi = AwdApi;
//# sourceMappingURL=api.js.map
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Orders
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API supports orders that are two years old or less. Orders more than two years old will not show in the API response.  **Note:** The Orders API supports orders from 2016 and after for the JP, AU, and SG marketplaces.
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShipmentApi = exports.ShipmentApiFactory = exports.ShipmentApiFp = exports.ShipmentApiAxiosParamCreator = exports.OrdersV0Api = exports.OrdersV0ApiFactory = exports.OrdersV0ApiFp = exports.OrdersV0ApiAxiosParamCreator = exports.VerificationStatus = exports.TaxCollectionResponsiblePartyEnum = exports.TaxCollectionModelEnum = exports.SubstitutionPreferencesSubstitutionTypeEnum = exports.ShipmentStatus = exports.RegulatedInformationFieldFieldTypeEnum = exports.OtherDeliveryAttributes = exports.OrderItemDeemedResellerCategoryEnum = exports.OrderBuyerInvoicePreferenceEnum = exports.OrderOrderTypeEnum = exports.OrderPaymentMethodEnum = exports.OrderFulfillmentChannelEnum = exports.OrderOrderStatusEnum = exports.MeasurementUnitEnum = exports.ElectronicInvoiceStatus = exports.EasyShipShipmentStatus = exports.ConstraintType = exports.ConfirmShipmentRequestCodCollectionMethodEnum = exports.BusinessHoursDayOfWeekEnum = exports.AssociationType = exports.AddressAddressTypeEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var AddressAddressTypeEnum;
(function (AddressAddressTypeEnum) {
    AddressAddressTypeEnum["Residential"] = "Residential";
    AddressAddressTypeEnum["Commercial"] = "Commercial";
})(AddressAddressTypeEnum || (exports.AddressAddressTypeEnum = AddressAddressTypeEnum = {}));
/**
 * The type of association an item has with an order item.
 * @export
 * @enum {string}
 */
var AssociationType;
(function (AssociationType) {
    AssociationType["ValueAddService"] = "VALUE_ADD_SERVICE";
})(AssociationType || (exports.AssociationType = AssociationType = {}));
/**
    * @export
    * @enum {string}
    */
var BusinessHoursDayOfWeekEnum;
(function (BusinessHoursDayOfWeekEnum) {
    BusinessHoursDayOfWeekEnum["Sun"] = "SUN";
    BusinessHoursDayOfWeekEnum["Mon"] = "MON";
    BusinessHoursDayOfWeekEnum["Tue"] = "TUE";
    BusinessHoursDayOfWeekEnum["Wed"] = "WED";
    BusinessHoursDayOfWeekEnum["Thu"] = "THU";
    BusinessHoursDayOfWeekEnum["Fri"] = "FRI";
    BusinessHoursDayOfWeekEnum["Sat"] = "SAT";
})(BusinessHoursDayOfWeekEnum || (exports.BusinessHoursDayOfWeekEnum = BusinessHoursDayOfWeekEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ConfirmShipmentRequestCodCollectionMethodEnum;
(function (ConfirmShipmentRequestCodCollectionMethodEnum) {
    ConfirmShipmentRequestCodCollectionMethodEnum["DirectPayment"] = "DirectPayment";
})(ConfirmShipmentRequestCodCollectionMethodEnum || (exports.ConfirmShipmentRequestCodCollectionMethodEnum = ConfirmShipmentRequestCodCollectionMethodEnum = {}));
/**
 * Details the importance of the constraint present on the item
 * @export
 * @enum {string}
 */
var ConstraintType;
(function (ConstraintType) {
    ConstraintType["Mandatory"] = "MANDATORY";
})(ConstraintType || (exports.ConstraintType = ConstraintType = {}));
/**
 * The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.
 * @export
 * @enum {string}
 */
var EasyShipShipmentStatus;
(function (EasyShipShipmentStatus) {
    EasyShipShipmentStatus["PendingSchedule"] = "PendingSchedule";
    EasyShipShipmentStatus["PendingPickUp"] = "PendingPickUp";
    EasyShipShipmentStatus["PendingDropOff"] = "PendingDropOff";
    EasyShipShipmentStatus["LabelCanceled"] = "LabelCanceled";
    EasyShipShipmentStatus["PickedUp"] = "PickedUp";
    EasyShipShipmentStatus["DroppedOff"] = "DroppedOff";
    EasyShipShipmentStatus["AtOriginFc"] = "AtOriginFC";
    EasyShipShipmentStatus["AtDestinationFc"] = "AtDestinationFC";
    EasyShipShipmentStatus["Delivered"] = "Delivered";
    EasyShipShipmentStatus["RejectedByBuyer"] = "RejectedByBuyer";
    EasyShipShipmentStatus["Undeliverable"] = "Undeliverable";
    EasyShipShipmentStatus["ReturningToSeller"] = "ReturningToSeller";
    EasyShipShipmentStatus["ReturnedToSeller"] = "ReturnedToSeller";
    EasyShipShipmentStatus["Lost"] = "Lost";
    EasyShipShipmentStatus["OutForDelivery"] = "OutForDelivery";
    EasyShipShipmentStatus["Damaged"] = "Damaged";
})(EasyShipShipmentStatus || (exports.EasyShipShipmentStatus = EasyShipShipmentStatus = {}));
/**
 * The status of the electronic invoice. Only available for Easy Ship orders and orders in the BR marketplace.
 * @export
 * @enum {string}
 */
var ElectronicInvoiceStatus;
(function (ElectronicInvoiceStatus) {
    ElectronicInvoiceStatus["NotRequired"] = "NotRequired";
    ElectronicInvoiceStatus["NotFound"] = "NotFound";
    ElectronicInvoiceStatus["Processing"] = "Processing";
    ElectronicInvoiceStatus["Errored"] = "Errored";
    ElectronicInvoiceStatus["Accepted"] = "Accepted";
})(ElectronicInvoiceStatus || (exports.ElectronicInvoiceStatus = ElectronicInvoiceStatus = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementUnitEnum;
(function (MeasurementUnitEnum) {
    MeasurementUnitEnum["Ounces"] = "OUNCES";
    MeasurementUnitEnum["Pounds"] = "POUNDS";
    MeasurementUnitEnum["Kilograms"] = "KILOGRAMS";
    MeasurementUnitEnum["Grams"] = "GRAMS";
    MeasurementUnitEnum["Milligrams"] = "MILLIGRAMS";
    MeasurementUnitEnum["Inches"] = "INCHES";
    MeasurementUnitEnum["Feet"] = "FEET";
    MeasurementUnitEnum["Meters"] = "METERS";
    MeasurementUnitEnum["Centimeters"] = "CENTIMETERS";
    MeasurementUnitEnum["Millimeters"] = "MILLIMETERS";
    MeasurementUnitEnum["SquareMeters"] = "SQUARE_METERS";
    MeasurementUnitEnum["SquareCentimeters"] = "SQUARE_CENTIMETERS";
    MeasurementUnitEnum["SquareFeet"] = "SQUARE_FEET";
    MeasurementUnitEnum["SquareInches"] = "SQUARE_INCHES";
    MeasurementUnitEnum["Gallons"] = "GALLONS";
    MeasurementUnitEnum["Pints"] = "PINTS";
    MeasurementUnitEnum["Quarts"] = "QUARTS";
    MeasurementUnitEnum["FluidOunces"] = "FLUID_OUNCES";
    MeasurementUnitEnum["Liters"] = "LITERS";
    MeasurementUnitEnum["CubicMeters"] = "CUBIC_METERS";
    MeasurementUnitEnum["CubicFeet"] = "CUBIC_FEET";
    MeasurementUnitEnum["CubicInches"] = "CUBIC_INCHES";
    MeasurementUnitEnum["CubicCentimeters"] = "CUBIC_CENTIMETERS";
    MeasurementUnitEnum["Count"] = "COUNT";
})(MeasurementUnitEnum || (exports.MeasurementUnitEnum = MeasurementUnitEnum = {}));
/**
    * @export
    * @enum {string}
    */
var OrderOrderStatusEnum;
(function (OrderOrderStatusEnum) {
    OrderOrderStatusEnum["Pending"] = "Pending";
    OrderOrderStatusEnum["Unshipped"] = "Unshipped";
    OrderOrderStatusEnum["PartiallyShipped"] = "PartiallyShipped";
    OrderOrderStatusEnum["Shipped"] = "Shipped";
    OrderOrderStatusEnum["Canceled"] = "Canceled";
    OrderOrderStatusEnum["Unfulfillable"] = "Unfulfillable";
    OrderOrderStatusEnum["InvoiceUnconfirmed"] = "InvoiceUnconfirmed";
    OrderOrderStatusEnum["PendingAvailability"] = "PendingAvailability";
})(OrderOrderStatusEnum || (exports.OrderOrderStatusEnum = OrderOrderStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var OrderFulfillmentChannelEnum;
(function (OrderFulfillmentChannelEnum) {
    OrderFulfillmentChannelEnum["Mfn"] = "MFN";
    OrderFulfillmentChannelEnum["Afn"] = "AFN";
})(OrderFulfillmentChannelEnum || (exports.OrderFulfillmentChannelEnum = OrderFulfillmentChannelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var OrderPaymentMethodEnum;
(function (OrderPaymentMethodEnum) {
    OrderPaymentMethodEnum["Cod"] = "COD";
    OrderPaymentMethodEnum["Cvs"] = "CVS";
    OrderPaymentMethodEnum["Other"] = "Other";
})(OrderPaymentMethodEnum || (exports.OrderPaymentMethodEnum = OrderPaymentMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var OrderOrderTypeEnum;
(function (OrderOrderTypeEnum) {
    OrderOrderTypeEnum["StandardOrder"] = "StandardOrder";
    OrderOrderTypeEnum["LongLeadTimeOrder"] = "LongLeadTimeOrder";
    OrderOrderTypeEnum["Preorder"] = "Preorder";
    OrderOrderTypeEnum["BackOrder"] = "BackOrder";
    OrderOrderTypeEnum["SourcingOnDemandOrder"] = "SourcingOnDemandOrder";
})(OrderOrderTypeEnum || (exports.OrderOrderTypeEnum = OrderOrderTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var OrderBuyerInvoicePreferenceEnum;
(function (OrderBuyerInvoicePreferenceEnum) {
    OrderBuyerInvoicePreferenceEnum["Individual"] = "INDIVIDUAL";
    OrderBuyerInvoicePreferenceEnum["Business"] = "BUSINESS";
})(OrderBuyerInvoicePreferenceEnum || (exports.OrderBuyerInvoicePreferenceEnum = OrderBuyerInvoicePreferenceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var OrderItemDeemedResellerCategoryEnum;
(function (OrderItemDeemedResellerCategoryEnum) {
    OrderItemDeemedResellerCategoryEnum["Ioss"] = "IOSS";
    OrderItemDeemedResellerCategoryEnum["Uoss"] = "UOSS";
})(OrderItemDeemedResellerCategoryEnum || (exports.OrderItemDeemedResellerCategoryEnum = OrderItemDeemedResellerCategoryEnum = {}));
/**
 * Miscellaneous delivery attributes associated with the shipping address.
 * @export
 * @enum {string}
 */
var OtherDeliveryAttributes;
(function (OtherDeliveryAttributes) {
    OtherDeliveryAttributes["HasAccessPoint"] = "HAS_ACCESS_POINT";
    OtherDeliveryAttributes["PalletEnabled"] = "PALLET_ENABLED";
    OtherDeliveryAttributes["PalletDisabled"] = "PALLET_DISABLED";
})(OtherDeliveryAttributes || (exports.OtherDeliveryAttributes = OtherDeliveryAttributes = {}));
/**
    * @export
    * @enum {string}
    */
var RegulatedInformationFieldFieldTypeEnum;
(function (RegulatedInformationFieldFieldTypeEnum) {
    RegulatedInformationFieldFieldTypeEnum["Text"] = "Text";
    RegulatedInformationFieldFieldTypeEnum["FileAttachment"] = "FileAttachment";
})(RegulatedInformationFieldFieldTypeEnum || (exports.RegulatedInformationFieldFieldTypeEnum = RegulatedInformationFieldFieldTypeEnum = {}));
/**
 * The shipment status to apply.
 * @export
 * @enum {string}
 */
var ShipmentStatus;
(function (ShipmentStatus) {
    ShipmentStatus["ReadyForPickup"] = "ReadyForPickup";
    ShipmentStatus["PickedUp"] = "PickedUp";
    ShipmentStatus["RefusedPickup"] = "RefusedPickup";
})(ShipmentStatus || (exports.ShipmentStatus = ShipmentStatus = {}));
/**
    * @export
    * @enum {string}
    */
var SubstitutionPreferencesSubstitutionTypeEnum;
(function (SubstitutionPreferencesSubstitutionTypeEnum) {
    SubstitutionPreferencesSubstitutionTypeEnum["CustomerPreference"] = "CUSTOMER_PREFERENCE";
    SubstitutionPreferencesSubstitutionTypeEnum["AmazonRecommended"] = "AMAZON_RECOMMENDED";
    SubstitutionPreferencesSubstitutionTypeEnum["DoNotSubstitute"] = "DO_NOT_SUBSTITUTE";
})(SubstitutionPreferencesSubstitutionTypeEnum || (exports.SubstitutionPreferencesSubstitutionTypeEnum = SubstitutionPreferencesSubstitutionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TaxCollectionModelEnum;
(function (TaxCollectionModelEnum) {
    TaxCollectionModelEnum["MarketplaceFacilitator"] = "MarketplaceFacilitator";
})(TaxCollectionModelEnum || (exports.TaxCollectionModelEnum = TaxCollectionModelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TaxCollectionResponsiblePartyEnum;
(function (TaxCollectionResponsiblePartyEnum) {
    TaxCollectionResponsiblePartyEnum["AmazonServicesInc"] = "Amazon Services, Inc.";
})(TaxCollectionResponsiblePartyEnum || (exports.TaxCollectionResponsiblePartyEnum = TaxCollectionResponsiblePartyEnum = {}));
/**
 * The verification status of the order.
 * @export
 * @enum {string}
 */
var VerificationStatus;
(function (VerificationStatus) {
    VerificationStatus["Pending"] = "Pending";
    VerificationStatus["Approved"] = "Approved";
    VerificationStatus["Rejected"] = "Rejected";
    VerificationStatus["Expired"] = "Expired";
    VerificationStatus["Cancelled"] = "Cancelled";
})(VerificationStatus || (exports.VerificationStatus = VerificationStatus = {}));
/**
 * OrdersV0Api - axios parameter creator
 * @export
 */
const OrdersV0ApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {ConfirmShipmentRequest} payload The request body of the &#x60;confirmShipment&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmShipment: async (orderId, payload, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('confirmShipment', 'orderId', orderId);
            // verify required parameter 'payload' is not null or undefined
            (0, common_1.assertParamExists)('confirmShipment', 'payload', payload);
            const localVarPath = `/orders/v0/orders/{orderId}/shipmentConfirmation`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payload, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (orderId, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('getOrder', 'orderId', orderId);
            const localVarPath = `/orders/v0/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderAddress: async (orderId, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('getOrderAddress', 'orderId', orderId);
            const localVarPath = `/orders/v0/orders/{orderId}/address`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBuyerInfo: async (orderId, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('getOrderBuyerInfo', 'orderId', orderId);
            const localVarPath = `/orders/v0/orders/{orderId}/buyerInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns detailed order item information for the order that you specify. If `NextToken` is provided, it\'s used to retrieve the next page of order items.  **Note**: When an order is in the Pending state (the order has been placed but payment has not been authorized), the `getOrderItems` operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the `Unshipped`, `Partially Shipped`, or `Shipped` state, the `getOrderItems` operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItems: async (orderId, nextToken, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('getOrderItems', 'orderId', orderId);
            const localVarPath = `/orders/v0/orders/{orderId}/orderItems`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsBuyerInfo: async (orderId, nextToken, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('getOrderItemsBuyerInfo', 'orderId', orderId);
            const localVarPath = `/orders/v0/orders/{orderId}/orderItems/buyerInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderRegulatedInfo: async (orderId, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('getOrderRegulatedInfo', 'orderId', orderId);
            const localVarPath = `/orders/v0/orders/{orderId}/regulatedInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds A list of &#x60;MarketplaceId&#x60; values. Used to select orders that were placed in the specified marketplaces.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of &#x60;MarketplaceId&#x60; values.
         * @param {string} [createdAfter] A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. You could specify &#x60;CreatedBefore&#x60; but not provide &#x60;LastUpdatedAfter&#x60; or &#x60;LastUpdatedBefore&#x60; when &#x60;CreatedAfter&#x60; is specified.
         * @param {string} [createdBefore] A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: &#x60;CreatedBefore&#x60; is optional when &#x60;CreatedAfter&#x60; is specified. But if specified, &#x60;CreatedBefore&#x60; should be equal to or after the &#x60;CreatedAfter&#x60; date and at least 2 minutes before the current time.
         * @param {string} [lastUpdatedAfter] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: &#x60;LastUpdatedBefore&#x60; is optional when &#x60;LastUpdatedAfter&#x60; is specified. But if specified, &#x60;LastUpdatedBefore&#x60; should be equal to or after the &#x60;LastUpdatedAfter&#x60; date and at least 2 minutes before current time.
         * @param {string} [lastUpdatedBefore] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: LastUpdatedBefore is optional when LastUpdatedAfter is set. But if specified, LastUpdatedBefore should be equal to or after the LastUpdatedAfter date and at least 2 minutes before current time.
         * @param {Array<string>} [orderStatuses] A list of &#x60;OrderStatus&#x60; values used to filter the results.  **Possible values:** - &#x60;PendingAvailability&#x60; (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.) - &#x60;Pending&#x60; (The order has been placed but payment has not been authorized.) - &#x60;Unshipped&#x60; (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.) - &#x60;PartiallyShipped&#x60; (One or more, but not all, items in the order have been shipped.) - &#x60;Shipped&#x60; (All items in the order have been shipped.) - &#x60;InvoiceUnconfirmed&#x60; (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.) - &#x60;Canceled&#x60; (The order has been canceled.) - &#x60;Unfulfillable&#x60; (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel.   **Possible values**: &#x60;AFN&#x60; (Fulfillment by Amazon); &#x60;MFN&#x60; (Fulfilled by the seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Used to select orders paid using the specified payment methods.  **Possible values**: &#x60;COD&#x60; (Cash on delivery); &#x60;CVS&#x60; (Convenience store payment); &#x60;Other&#x60; (Any payment method other than &#x60;COD&#x60; or &#x60;CVS&#x60;).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of &#x60;EasyShipShipmentStatus&#x60; values. Used to select Easy Ship orders with statuses that match the specified values. If &#x60;EasyShipShipmentStatus&#x60; is specified, only Amazon Easy Ship orders are returned.  **Possible values:** - &#x60;PendingSchedule&#x60; (The package is awaiting the schedule for pick-up.) - &#x60;PendingPickUp&#x60; (Amazon has not yet picked up the package from the seller.) - &#x60;PendingDropOff&#x60; (The seller will deliver the package to the carrier.) - &#x60;LabelCanceled&#x60; (The seller canceled the pickup.) - &#x60;PickedUp&#x60; (Amazon has picked up the package from the seller.) - &#x60;DroppedOff&#x60; (The package is delivered to the carrier by the seller.) - &#x60;AtOriginFC&#x60; (The packaged is at the origin fulfillment center.) - &#x60;AtDestinationFC&#x60; (The package is at the destination fulfillment center.) - &#x60;Delivered&#x60; (The package has been delivered.) - &#x60;RejectedByBuyer&#x60; (The package has been rejected by the buyer.) - &#x60;Undeliverable&#x60; (The package cannot be delivered.) - &#x60;ReturningToSeller&#x60; (The package was not delivered and is being returned to the seller.) - &#x60;ReturnedToSeller&#x60; (The package was not delivered and was returned to the seller.) - &#x60;Lost&#x60; (The package is lost.) - &#x60;OutForDelivery&#x60; (The package is out for delivery.) - &#x60;Damaged&#x60; (The package was damaged by the carrier.)
         * @param {Array<string>} [electronicInvoiceStatuses] A list of &#x60;ElectronicInvoiceStatus&#x60; values. Used to select orders with electronic invoice statuses that match the specified values.  **Possible values:** - &#x60;NotRequired&#x60; (Electronic invoice submission is not required for this order.) - &#x60;NotFound&#x60; (The electronic invoice was not submitted for this order.) - &#x60;Processing&#x60; (The electronic invoice is being processed for this order.) - &#x60;Errored&#x60; (The last submitted electronic invoice was rejected for this order.) - &#x60;Accepted&#x60; (The last submitted electronic invoice was submitted and accepted.)
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [actualFulfillmentSupplySourceId] Denotes the recommended sourceId where the order should be fulfilled from.
         * @param {boolean} [isISPU] When true, this order is marked to be picked up from a store rather than delivered.
         * @param {string} [storeChainStoreId] The store chain store identifier. Linked to a specific store in a store chain.
         * @param {string} [earliestDeliveryDateBefore] A date used for selecting orders with a earliest delivery date before (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [earliestDeliveryDateAfter] A date used for selecting orders with a earliest delivery date after (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [latestDeliveryDateBefore] A date used for selecting orders with a latest delivery date before (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [latestDeliveryDateAfter] A date used for selecting orders with a latest delivery date after (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter, options = {}) => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            (0, common_1.assertParamExists)('getOrders', 'marketplaceIds', marketplaceIds);
            const localVarPath = `/orders/v0/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (createdAfter !== undefined) {
                localVarQueryParameter['CreatedAfter'] = createdAfter;
            }
            if (createdBefore !== undefined) {
                localVarQueryParameter['CreatedBefore'] = createdBefore;
            }
            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['LastUpdatedAfter'] = lastUpdatedAfter;
            }
            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['LastUpdatedBefore'] = lastUpdatedBefore;
            }
            if (orderStatuses) {
                localVarQueryParameter['OrderStatuses'] = orderStatuses.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (marketplaceIds) {
                localVarQueryParameter['MarketplaceIds'] = marketplaceIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (fulfillmentChannels) {
                localVarQueryParameter['FulfillmentChannels'] = fulfillmentChannels.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (paymentMethods) {
                localVarQueryParameter['PaymentMethods'] = paymentMethods.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (buyerEmail !== undefined) {
                localVarQueryParameter['BuyerEmail'] = buyerEmail;
            }
            if (sellerOrderId !== undefined) {
                localVarQueryParameter['SellerOrderId'] = sellerOrderId;
            }
            if (maxResultsPerPage !== undefined) {
                localVarQueryParameter['MaxResultsPerPage'] = maxResultsPerPage;
            }
            if (easyShipShipmentStatuses) {
                localVarQueryParameter['EasyShipShipmentStatuses'] = easyShipShipmentStatuses.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (electronicInvoiceStatuses) {
                localVarQueryParameter['ElectronicInvoiceStatuses'] = electronicInvoiceStatuses.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }
            if (amazonOrderIds) {
                localVarQueryParameter['AmazonOrderIds'] = amazonOrderIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (actualFulfillmentSupplySourceId !== undefined) {
                localVarQueryParameter['ActualFulfillmentSupplySourceId'] = actualFulfillmentSupplySourceId;
            }
            if (isISPU !== undefined) {
                localVarQueryParameter['IsISPU'] = isISPU;
            }
            if (storeChainStoreId !== undefined) {
                localVarQueryParameter['StoreChainStoreId'] = storeChainStoreId;
            }
            if (earliestDeliveryDateBefore !== undefined) {
                localVarQueryParameter['EarliestDeliveryDateBefore'] = earliestDeliveryDateBefore;
            }
            if (earliestDeliveryDateAfter !== undefined) {
                localVarQueryParameter['EarliestDeliveryDateAfter'] = earliestDeliveryDateAfter;
            }
            if (latestDeliveryDateBefore !== undefined) {
                localVarQueryParameter['LatestDeliveryDateBefore'] = latestDeliveryDateBefore;
            }
            if (latestDeliveryDateAfter !== undefined) {
                localVarQueryParameter['LatestDeliveryDateAfter'] = latestDeliveryDateAfter;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateVerificationStatusRequest} payload The request body for the &#x60;updateVerificationStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVerificationStatus: async (orderId, payload, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('updateVerificationStatus', 'orderId', orderId);
            // verify required parameter 'payload' is not null or undefined
            (0, common_1.assertParamExists)('updateVerificationStatus', 'payload', payload);
            const localVarPath = `/orders/v0/orders/{orderId}/regulatedInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payload, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OrdersV0ApiAxiosParamCreator = OrdersV0ApiAxiosParamCreator;
/**
 * OrdersV0Api - functional programming interface
 * @export
 */
const OrdersV0ApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OrdersV0ApiAxiosParamCreator)(configuration);
    return {
        /**
         * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {ConfirmShipmentRequest} payload The request body of the &#x60;confirmShipment&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmShipment(orderId, payload, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmShipment(orderId, payload, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(orderId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(orderId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderAddress(orderId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderAddress(orderId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderBuyerInfo(orderId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderBuyerInfo(orderId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns detailed order item information for the order that you specify. If `NextToken` is provided, it\'s used to retrieve the next page of order items.  **Note**: When an order is in the Pending state (the order has been placed but payment has not been authorized), the `getOrderItems` operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the `Unshipped`, `Partially Shipped`, or `Shipped` state, the `getOrderItems` operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderItems(orderId, nextToken, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderItems(orderId, nextToken, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderItemsBuyerInfo(orderId, nextToken, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderItemsBuyerInfo(orderId, nextToken, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderRegulatedInfo(orderId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderRegulatedInfo(orderId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds A list of &#x60;MarketplaceId&#x60; values. Used to select orders that were placed in the specified marketplaces.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of &#x60;MarketplaceId&#x60; values.
         * @param {string} [createdAfter] A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. You could specify &#x60;CreatedBefore&#x60; but not provide &#x60;LastUpdatedAfter&#x60; or &#x60;LastUpdatedBefore&#x60; when &#x60;CreatedAfter&#x60; is specified.
         * @param {string} [createdBefore] A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: &#x60;CreatedBefore&#x60; is optional when &#x60;CreatedAfter&#x60; is specified. But if specified, &#x60;CreatedBefore&#x60; should be equal to or after the &#x60;CreatedAfter&#x60; date and at least 2 minutes before the current time.
         * @param {string} [lastUpdatedAfter] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: &#x60;LastUpdatedBefore&#x60; is optional when &#x60;LastUpdatedAfter&#x60; is specified. But if specified, &#x60;LastUpdatedBefore&#x60; should be equal to or after the &#x60;LastUpdatedAfter&#x60; date and at least 2 minutes before current time.
         * @param {string} [lastUpdatedBefore] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: LastUpdatedBefore is optional when LastUpdatedAfter is set. But if specified, LastUpdatedBefore should be equal to or after the LastUpdatedAfter date and at least 2 minutes before current time.
         * @param {Array<string>} [orderStatuses] A list of &#x60;OrderStatus&#x60; values used to filter the results.  **Possible values:** - &#x60;PendingAvailability&#x60; (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.) - &#x60;Pending&#x60; (The order has been placed but payment has not been authorized.) - &#x60;Unshipped&#x60; (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.) - &#x60;PartiallyShipped&#x60; (One or more, but not all, items in the order have been shipped.) - &#x60;Shipped&#x60; (All items in the order have been shipped.) - &#x60;InvoiceUnconfirmed&#x60; (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.) - &#x60;Canceled&#x60; (The order has been canceled.) - &#x60;Unfulfillable&#x60; (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel.   **Possible values**: &#x60;AFN&#x60; (Fulfillment by Amazon); &#x60;MFN&#x60; (Fulfilled by the seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Used to select orders paid using the specified payment methods.  **Possible values**: &#x60;COD&#x60; (Cash on delivery); &#x60;CVS&#x60; (Convenience store payment); &#x60;Other&#x60; (Any payment method other than &#x60;COD&#x60; or &#x60;CVS&#x60;).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of &#x60;EasyShipShipmentStatus&#x60; values. Used to select Easy Ship orders with statuses that match the specified values. If &#x60;EasyShipShipmentStatus&#x60; is specified, only Amazon Easy Ship orders are returned.  **Possible values:** - &#x60;PendingSchedule&#x60; (The package is awaiting the schedule for pick-up.) - &#x60;PendingPickUp&#x60; (Amazon has not yet picked up the package from the seller.) - &#x60;PendingDropOff&#x60; (The seller will deliver the package to the carrier.) - &#x60;LabelCanceled&#x60; (The seller canceled the pickup.) - &#x60;PickedUp&#x60; (Amazon has picked up the package from the seller.) - &#x60;DroppedOff&#x60; (The package is delivered to the carrier by the seller.) - &#x60;AtOriginFC&#x60; (The packaged is at the origin fulfillment center.) - &#x60;AtDestinationFC&#x60; (The package is at the destination fulfillment center.) - &#x60;Delivered&#x60; (The package has been delivered.) - &#x60;RejectedByBuyer&#x60; (The package has been rejected by the buyer.) - &#x60;Undeliverable&#x60; (The package cannot be delivered.) - &#x60;ReturningToSeller&#x60; (The package was not delivered and is being returned to the seller.) - &#x60;ReturnedToSeller&#x60; (The package was not delivered and was returned to the seller.) - &#x60;Lost&#x60; (The package is lost.) - &#x60;OutForDelivery&#x60; (The package is out for delivery.) - &#x60;Damaged&#x60; (The package was damaged by the carrier.)
         * @param {Array<string>} [electronicInvoiceStatuses] A list of &#x60;ElectronicInvoiceStatus&#x60; values. Used to select orders with electronic invoice statuses that match the specified values.  **Possible values:** - &#x60;NotRequired&#x60; (Electronic invoice submission is not required for this order.) - &#x60;NotFound&#x60; (The electronic invoice was not submitted for this order.) - &#x60;Processing&#x60; (The electronic invoice is being processed for this order.) - &#x60;Errored&#x60; (The last submitted electronic invoice was rejected for this order.) - &#x60;Accepted&#x60; (The last submitted electronic invoice was submitted and accepted.)
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [actualFulfillmentSupplySourceId] Denotes the recommended sourceId where the order should be fulfilled from.
         * @param {boolean} [isISPU] When true, this order is marked to be picked up from a store rather than delivered.
         * @param {string} [storeChainStoreId] The store chain store identifier. Linked to a specific store in a store chain.
         * @param {string} [earliestDeliveryDateBefore] A date used for selecting orders with a earliest delivery date before (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [earliestDeliveryDateAfter] A date used for selecting orders with a earliest delivery date after (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [latestDeliveryDateBefore] A date used for selecting orders with a latest delivery date before (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [latestDeliveryDateAfter] A date used for selecting orders with a latest delivery date after (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateVerificationStatusRequest} payload The request body for the &#x60;updateVerificationStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVerificationStatus(orderId, payload, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVerificationStatus(orderId, payload, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.OrdersV0ApiFp = OrdersV0ApiFp;
/**
 * OrdersV0Api - factory interface
 * @export
 */
const OrdersV0ApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OrdersV0ApiFp)(configuration);
    return {
        /**
         * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {ConfirmShipmentRequest} payload The request body of the &#x60;confirmShipment&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmShipment(orderId, payload, options) {
            return localVarFp.confirmShipment(orderId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId, options) {
            return localVarFp.getOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderAddress(orderId, options) {
            return localVarFp.getOrderAddress(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBuyerInfo(orderId, options) {
            return localVarFp.getOrderBuyerInfo(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns detailed order item information for the order that you specify. If `NextToken` is provided, it\'s used to retrieve the next page of order items.  **Note**: When an order is in the Pending state (the order has been placed but payment has not been authorized), the `getOrderItems` operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the `Unshipped`, `Partially Shipped`, or `Shipped` state, the `getOrderItems` operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItems(orderId, nextToken, options) {
            return localVarFp.getOrderItems(orderId, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsBuyerInfo(orderId, nextToken, options) {
            return localVarFp.getOrderItemsBuyerInfo(orderId, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderRegulatedInfo(orderId, options) {
            return localVarFp.getOrderRegulatedInfo(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds A list of &#x60;MarketplaceId&#x60; values. Used to select orders that were placed in the specified marketplaces.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of &#x60;MarketplaceId&#x60; values.
         * @param {string} [createdAfter] A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. You could specify &#x60;CreatedBefore&#x60; but not provide &#x60;LastUpdatedAfter&#x60; or &#x60;LastUpdatedBefore&#x60; when &#x60;CreatedAfter&#x60; is specified.
         * @param {string} [createdBefore] A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: &#x60;CreatedBefore&#x60; is optional when &#x60;CreatedAfter&#x60; is specified. But if specified, &#x60;CreatedBefore&#x60; should be equal to or after the &#x60;CreatedAfter&#x60; date and at least 2 minutes before the current time.
         * @param {string} [lastUpdatedAfter] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: &#x60;LastUpdatedBefore&#x60; is optional when &#x60;LastUpdatedAfter&#x60; is specified. But if specified, &#x60;LastUpdatedBefore&#x60; should be equal to or after the &#x60;LastUpdatedAfter&#x60; date and at least 2 minutes before current time.
         * @param {string} [lastUpdatedBefore] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.  **Note**: LastUpdatedBefore is optional when LastUpdatedAfter is set. But if specified, LastUpdatedBefore should be equal to or after the LastUpdatedAfter date and at least 2 minutes before current time.
         * @param {Array<string>} [orderStatuses] A list of &#x60;OrderStatus&#x60; values used to filter the results.  **Possible values:** - &#x60;PendingAvailability&#x60; (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.) - &#x60;Pending&#x60; (The order has been placed but payment has not been authorized.) - &#x60;Unshipped&#x60; (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.) - &#x60;PartiallyShipped&#x60; (One or more, but not all, items in the order have been shipped.) - &#x60;Shipped&#x60; (All items in the order have been shipped.) - &#x60;InvoiceUnconfirmed&#x60; (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.) - &#x60;Canceled&#x60; (The order has been canceled.) - &#x60;Unfulfillable&#x60; (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel.   **Possible values**: &#x60;AFN&#x60; (Fulfillment by Amazon); &#x60;MFN&#x60; (Fulfilled by the seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Used to select orders paid using the specified payment methods.  **Possible values**: &#x60;COD&#x60; (Cash on delivery); &#x60;CVS&#x60; (Convenience store payment); &#x60;Other&#x60; (Any payment method other than &#x60;COD&#x60; or &#x60;CVS&#x60;).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of &#x60;EasyShipShipmentStatus&#x60; values. Used to select Easy Ship orders with statuses that match the specified values. If &#x60;EasyShipShipmentStatus&#x60; is specified, only Amazon Easy Ship orders are returned.  **Possible values:** - &#x60;PendingSchedule&#x60; (The package is awaiting the schedule for pick-up.) - &#x60;PendingPickUp&#x60; (Amazon has not yet picked up the package from the seller.) - &#x60;PendingDropOff&#x60; (The seller will deliver the package to the carrier.) - &#x60;LabelCanceled&#x60; (The seller canceled the pickup.) - &#x60;PickedUp&#x60; (Amazon has picked up the package from the seller.) - &#x60;DroppedOff&#x60; (The package is delivered to the carrier by the seller.) - &#x60;AtOriginFC&#x60; (The packaged is at the origin fulfillment center.) - &#x60;AtDestinationFC&#x60; (The package is at the destination fulfillment center.) - &#x60;Delivered&#x60; (The package has been delivered.) - &#x60;RejectedByBuyer&#x60; (The package has been rejected by the buyer.) - &#x60;Undeliverable&#x60; (The package cannot be delivered.) - &#x60;ReturningToSeller&#x60; (The package was not delivered and is being returned to the seller.) - &#x60;ReturnedToSeller&#x60; (The package was not delivered and was returned to the seller.) - &#x60;Lost&#x60; (The package is lost.) - &#x60;OutForDelivery&#x60; (The package is out for delivery.) - &#x60;Damaged&#x60; (The package was damaged by the carrier.)
         * @param {Array<string>} [electronicInvoiceStatuses] A list of &#x60;ElectronicInvoiceStatus&#x60; values. Used to select orders with electronic invoice statuses that match the specified values.  **Possible values:** - &#x60;NotRequired&#x60; (Electronic invoice submission is not required for this order.) - &#x60;NotFound&#x60; (The electronic invoice was not submitted for this order.) - &#x60;Processing&#x60; (The electronic invoice is being processed for this order.) - &#x60;Errored&#x60; (The last submitted electronic invoice was rejected for this order.) - &#x60;Accepted&#x60; (The last submitted electronic invoice was submitted and accepted.)
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [actualFulfillmentSupplySourceId] Denotes the recommended sourceId where the order should be fulfilled from.
         * @param {boolean} [isISPU] When true, this order is marked to be picked up from a store rather than delivered.
         * @param {string} [storeChainStoreId] The store chain store identifier. Linked to a specific store in a store chain.
         * @param {string} [earliestDeliveryDateBefore] A date used for selecting orders with a earliest delivery date before (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [earliestDeliveryDateAfter] A date used for selecting orders with a earliest delivery date after (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [latestDeliveryDateBefore] A date used for selecting orders with a latest delivery date before (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [latestDeliveryDateAfter] A date used for selecting orders with a latest delivery date after (or at) a specified time. The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter, options) {
            return localVarFp.getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateVerificationStatusRequest} payload The request body for the &#x60;updateVerificationStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVerificationStatus(orderId, payload, options) {
            return localVarFp.updateVerificationStatus(orderId, payload, options).then((request) => request(axios, basePath));
        },
    };
};
exports.OrdersV0ApiFactory = OrdersV0ApiFactory;
/**
 * OrdersV0Api - object-oriented interface
 * @export
 * @class OrdersV0Api
 * @extends {BaseAPI}
 */
class OrdersV0Api extends base_1.BaseAPI {
    /**
     * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiConfirmShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    confirmShipment(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).confirmShipment(requestParameters.orderId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    getOrder(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).getOrder(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiGetOrderAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    getOrderAddress(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).getOrderAddress(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiGetOrderBuyerInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    getOrderBuyerInfo(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).getOrderBuyerInfo(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns detailed order item information for the order that you specify. If `NextToken` is provided, it\'s used to retrieve the next page of order items.  **Note**: When an order is in the Pending state (the order has been placed but payment has not been authorized), the `getOrderItems` operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the `Unshipped`, `Partially Shipped`, or `Shipped` state, the `getOrderItems` operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiGetOrderItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    getOrderItems(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).getOrderItems(requestParameters.orderId, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiGetOrderItemsBuyerInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    getOrderItemsBuyerInfo(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).getOrderItemsBuyerInfo(requestParameters.orderId, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiGetOrderRegulatedInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    getOrderRegulatedInfo(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).getOrderRegulatedInfo(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    getOrders(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).getOrders(requestParameters.marketplaceIds, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.orderStatuses, requestParameters.fulfillmentChannels, requestParameters.paymentMethods, requestParameters.buyerEmail, requestParameters.sellerOrderId, requestParameters.maxResultsPerPage, requestParameters.easyShipShipmentStatuses, requestParameters.electronicInvoiceStatuses, requestParameters.nextToken, requestParameters.amazonOrderIds, requestParameters.actualFulfillmentSupplySourceId, requestParameters.isISPU, requestParameters.storeChainStoreId, requestParameters.earliestDeliveryDateBefore, requestParameters.earliestDeliveryDateAfter, requestParameters.latestDeliveryDateBefore, requestParameters.latestDeliveryDateAfter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OrdersV0ApiUpdateVerificationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    updateVerificationStatus(requestParameters, options) {
        return (0, exports.OrdersV0ApiFp)(this.configuration).updateVerificationStatus(requestParameters.orderId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OrdersV0Api = OrdersV0Api;
/**
 * ShipmentApi - axios parameter creator
 * @export
 */
const ShipmentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Update the shipment status for an order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload The request body for the &#x60;updateShipmentStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentStatus: async (orderId, payload, options = {}) => {
            // verify required parameter 'orderId' is not null or undefined
            (0, common_1.assertParamExists)('updateShipmentStatus', 'orderId', orderId);
            // verify required parameter 'payload' is not null or undefined
            (0, common_1.assertParamExists)('updateShipmentStatus', 'payload', payload);
            const localVarPath = `/orders/v0/orders/{orderId}/shipment`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payload, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ShipmentApiAxiosParamCreator = ShipmentApiAxiosParamCreator;
/**
 * ShipmentApi - functional programming interface
 * @export
 */
const ShipmentApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ShipmentApiAxiosParamCreator)(configuration);
    return {
        /**
         * Update the shipment status for an order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload The request body for the &#x60;updateShipmentStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentStatus(orderId, payload, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentStatus(orderId, payload, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ShipmentApiFp = ShipmentApiFp;
/**
 * ShipmentApi - factory interface
 * @export
 */
const ShipmentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ShipmentApiFp)(configuration);
    return {
        /**
         * Update the shipment status for an order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload The request body for the &#x60;updateShipmentStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentStatus(orderId, payload, options) {
            return localVarFp.updateShipmentStatus(orderId, payload, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ShipmentApiFactory = ShipmentApiFactory;
/**
 * ShipmentApi - object-oriented interface
 * @export
 * @class ShipmentApi
 * @extends {BaseAPI}
 */
class ShipmentApi extends base_1.BaseAPI {
    /**
     * Update the shipment status for an order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShipmentApiUpdateShipmentStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    updateShipmentStatus(requestParameters, options) {
        return (0, exports.ShipmentApiFp)(this.configuration).updateShipmentStatus(requestParameters.orderId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ShipmentApi = ShipmentApi;
//# sourceMappingURL=api.js.map
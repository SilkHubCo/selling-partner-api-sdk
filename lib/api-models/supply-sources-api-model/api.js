"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Supply Sources
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupplySourcesApi = exports.SupplySourcesApiFactory = exports.SupplySourcesApiFp = exports.SupplySourcesApiAxiosParamCreator = exports.TimeUnit = exports.ThroughputUnit = exports.SupplySourceStatusReadOnly = exports.SupplySourceStatus = exports.ParkingSpotIdentificationType = exports.ParkingCostType = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * The parking cost type.
 * @export
 * @enum {string}
 */
var ParkingCostType;
(function (ParkingCostType) {
    ParkingCostType["Free"] = "Free";
    ParkingCostType["Other"] = "Other";
})(ParkingCostType || (exports.ParkingCostType = ParkingCostType = {}));
/**
 * The type of parking spot identification.
 * @export
 * @enum {string}
 */
var ParkingSpotIdentificationType;
(function (ParkingSpotIdentificationType) {
    ParkingSpotIdentificationType["Numbered"] = "Numbered";
    ParkingSpotIdentificationType["Other"] = "Other";
})(ParkingSpotIdentificationType || (exports.ParkingSpotIdentificationType = ParkingSpotIdentificationType = {}));
/**
 * The `SupplySource` status
 * @export
 * @enum {string}
 */
var SupplySourceStatus;
(function (SupplySourceStatus) {
    SupplySourceStatus["Active"] = "Active";
    SupplySourceStatus["Inactive"] = "Inactive";
})(SupplySourceStatus || (exports.SupplySourceStatus = SupplySourceStatus = {}));
/**
 * The `SupplySource` status.
 * @export
 * @enum {string}
 */
var SupplySourceStatusReadOnly;
(function (SupplySourceStatusReadOnly) {
    SupplySourceStatusReadOnly["Active"] = "Active";
    SupplySourceStatusReadOnly["Inactive"] = "Inactive";
    SupplySourceStatusReadOnly["Archived"] = "Archived";
})(SupplySourceStatusReadOnly || (exports.SupplySourceStatusReadOnly = SupplySourceStatusReadOnly = {}));
/**
 * The throughput unit
 * @export
 * @enum {string}
 */
var ThroughputUnit;
(function (ThroughputUnit) {
    ThroughputUnit["Order"] = "Order";
})(ThroughputUnit || (exports.ThroughputUnit = ThroughputUnit = {}));
/**
 * The time unit
 * @export
 * @enum {string}
 */
var TimeUnit;
(function (TimeUnit) {
    TimeUnit["Hours"] = "Hours";
    TimeUnit["Minutes"] = "Minutes";
    TimeUnit["Days"] = "Days";
})(TimeUnit || (exports.TimeUnit = TimeUnit = {}));
/**
 * SupplySourcesApi - axios parameter creator
 * @export
 */
const SupplySourcesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Archive a supply source, making it inactive. Cannot be undone.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveSupplySource: async (supplySourceId, options = {}) => {
            // verify required parameter 'supplySourceId' is not null or undefined
            (0, common_1.assertParamExists)('archiveSupplySource', 'supplySourceId', supplySourceId);
            const localVarPath = `/supplySources/2020-07-01/supplySources/{supplySourceId}`
                .replace(`{${"supplySourceId"}}`, encodeURIComponent(String(supplySourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new supply source.
         * @param {CreateSupplySourceRequest} payload A request to create a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupplySource: async (payload, options = {}) => {
            // verify required parameter 'payload' is not null or undefined
            (0, common_1.assertParamExists)('createSupplySource', 'payload', payload);
            const localVarPath = `/supplySources/2020-07-01/supplySources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payload, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a supply source.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplySource: async (supplySourceId, options = {}) => {
            // verify required parameter 'supplySourceId' is not null or undefined
            (0, common_1.assertParamExists)('getSupplySource', 'supplySourceId', supplySourceId);
            const localVarPath = `/supplySources/2020-07-01/supplySources/{supplySourceId}`
                .replace(`{${"supplySourceId"}}`, encodeURIComponent(String(supplySourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The path to retrieve paginated supply sources.
         * @param {string} [nextPageToken] The pagination token to retrieve a specific page of results.
         * @param {number} [pageSize] The number of supply sources to return per paginated request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplySources: async (nextPageToken, pageSize, options = {}) => {
            const localVarPath = `/supplySources/2020-07-01/supplySources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the configuration and capabilities of a supply source.
         * @param {string} supplySourceId The unique identitier of a supply source.
         * @param {UpdateSupplySourceRequest} [payload]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplySource: async (supplySourceId, payload, options = {}) => {
            // verify required parameter 'supplySourceId' is not null or undefined
            (0, common_1.assertParamExists)('updateSupplySource', 'supplySourceId', supplySourceId);
            const localVarPath = `/supplySources/2020-07-01/supplySources/{supplySourceId}`
                .replace(`{${"supplySourceId"}}`, encodeURIComponent(String(supplySourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payload, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a supply source.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {UpdateSupplySourceStatusRequest} [payload]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplySourceStatus: async (supplySourceId, payload, options = {}) => {
            // verify required parameter 'supplySourceId' is not null or undefined
            (0, common_1.assertParamExists)('updateSupplySourceStatus', 'supplySourceId', supplySourceId);
            const localVarPath = `/supplySources/2020-07-01/supplySources/{supplySourceId}/status`
                .replace(`{${"supplySourceId"}}`, encodeURIComponent(String(supplySourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payload, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SupplySourcesApiAxiosParamCreator = SupplySourcesApiAxiosParamCreator;
/**
 * SupplySourcesApi - functional programming interface
 * @export
 */
const SupplySourcesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SupplySourcesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Archive a supply source, making it inactive. Cannot be undone.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveSupplySource(supplySourceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveSupplySource(supplySourceId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Create a new supply source.
         * @param {CreateSupplySourceRequest} payload A request to create a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSupplySource(payload, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSupplySource(payload, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a supply source.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupplySource(supplySourceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupplySource(supplySourceId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * The path to retrieve paginated supply sources.
         * @param {string} [nextPageToken] The pagination token to retrieve a specific page of results.
         * @param {number} [pageSize] The number of supply sources to return per paginated request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupplySources(nextPageToken, pageSize, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupplySources(nextPageToken, pageSize, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update the configuration and capabilities of a supply source.
         * @param {string} supplySourceId The unique identitier of a supply source.
         * @param {UpdateSupplySourceRequest} [payload]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSupplySource(supplySourceId, payload, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSupplySource(supplySourceId, payload, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update the status of a supply source.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {UpdateSupplySourceStatusRequest} [payload]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSupplySourceStatus(supplySourceId, payload, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSupplySourceStatus(supplySourceId, payload, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.SupplySourcesApiFp = SupplySourcesApiFp;
/**
 * SupplySourcesApi - factory interface
 * @export
 */
const SupplySourcesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SupplySourcesApiFp)(configuration);
    return {
        /**
         * Archive a supply source, making it inactive. Cannot be undone.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveSupplySource(supplySourceId, options) {
            return localVarFp.archiveSupplySource(supplySourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new supply source.
         * @param {CreateSupplySourceRequest} payload A request to create a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupplySource(payload, options) {
            return localVarFp.createSupplySource(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a supply source.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplySource(supplySourceId, options) {
            return localVarFp.getSupplySource(supplySourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * The path to retrieve paginated supply sources.
         * @param {string} [nextPageToken] The pagination token to retrieve a specific page of results.
         * @param {number} [pageSize] The number of supply sources to return per paginated request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplySources(nextPageToken, pageSize, options) {
            return localVarFp.getSupplySources(nextPageToken, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the configuration and capabilities of a supply source.
         * @param {string} supplySourceId The unique identitier of a supply source.
         * @param {UpdateSupplySourceRequest} [payload]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplySource(supplySourceId, payload, options) {
            return localVarFp.updateSupplySource(supplySourceId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a supply source.
         * @param {string} supplySourceId The unique identifier of a supply source.
         * @param {UpdateSupplySourceStatusRequest} [payload]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplySourceStatus(supplySourceId, payload, options) {
            return localVarFp.updateSupplySourceStatus(supplySourceId, payload, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SupplySourcesApiFactory = SupplySourcesApiFactory;
/**
 * SupplySourcesApi - object-oriented interface
 * @export
 * @class SupplySourcesApi
 * @extends {BaseAPI}
 */
class SupplySourcesApi extends base_1.BaseAPI {
    /**
     * Archive a supply source, making it inactive. Cannot be undone.
     * @param {SupplySourcesApiArchiveSupplySourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplySourcesApi
     */
    archiveSupplySource(requestParameters, options) {
        return (0, exports.SupplySourcesApiFp)(this.configuration).archiveSupplySource(requestParameters.supplySourceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new supply source.
     * @param {SupplySourcesApiCreateSupplySourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplySourcesApi
     */
    createSupplySource(requestParameters, options) {
        return (0, exports.SupplySourcesApiFp)(this.configuration).createSupplySource(requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a supply source.
     * @param {SupplySourcesApiGetSupplySourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplySourcesApi
     */
    getSupplySource(requestParameters, options) {
        return (0, exports.SupplySourcesApiFp)(this.configuration).getSupplySource(requestParameters.supplySourceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The path to retrieve paginated supply sources.
     * @param {SupplySourcesApiGetSupplySourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplySourcesApi
     */
    getSupplySources(requestParameters = {}, options) {
        return (0, exports.SupplySourcesApiFp)(this.configuration).getSupplySources(requestParameters.nextPageToken, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the configuration and capabilities of a supply source.
     * @param {SupplySourcesApiUpdateSupplySourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplySourcesApi
     */
    updateSupplySource(requestParameters, options) {
        return (0, exports.SupplySourcesApiFp)(this.configuration).updateSupplySource(requestParameters.supplySourceId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the status of a supply source.
     * @param {SupplySourcesApiUpdateSupplySourceStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplySourcesApi
     */
    updateSupplySourceStatus(requestParameters, options) {
        return (0, exports.SupplySourcesApiFp)(this.configuration).updateSupplySourceStatus(requestParameters.supplySourceId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SupplySourcesApi = SupplySourcesApi;
//# sourceMappingURL=api.js.map
/**
 * Selling Partner API for Feeds
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * The version of the OpenAPI document: 2021-06-30
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Information required to upload a feed document\'s contents.
 * @export
 * @interface CreateFeedDocumentResponse
 */
export interface CreateFeedDocumentResponse {
    /**
     * The identifier of the feed document.
     * @type {string}
     * @memberof CreateFeedDocumentResponse
     */
    feedDocumentId: string;
    /**
     * The presigned URL for uploading the feed contents. This URL expires after 5 minutes.
     * @type {string}
     * @memberof CreateFeedDocumentResponse
     */
    url: string;
}
/**
 * Specifies the content type for the createFeedDocument operation.
 * @export
 * @interface CreateFeedDocumentSpecification
 */
export interface CreateFeedDocumentSpecification {
    /**
     * The content type of the feed.
     * @type {string}
     * @memberof CreateFeedDocumentSpecification
     */
    contentType: string;
}
/**
 * Response schema.
 * @export
 * @interface CreateFeedResponse
 */
export interface CreateFeedResponse {
    /**
     * The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof CreateFeedResponse
     */
    feedId: string;
}
/**
 * Information required to create the feed.
 * @export
 * @interface CreateFeedSpecification
 */
export interface CreateFeedSpecification {
    /**
     * The feed type.
     * @type {string}
     * @memberof CreateFeedSpecification
     */
    feedType: string;
    /**
     * A list of identifiers for marketplaces that you want the feed to be applied to.
     * @type {Array<string>}
     * @memberof CreateFeedSpecification
     */
    marketplaceIds: Array<string>;
    /**
     * The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation.
     * @type {string}
     * @memberof CreateFeedSpecification
     */
    inputFeedDocumentId: string;
    /**
     * Additional options to control the feed. These vary by feed type.
     * @type {{ [key: string]: string; }}
     * @memberof CreateFeedSpecification
     */
    feedOptions?: {
        [key: string]: string;
    };
}
/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * An error response returned when the request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * Detailed information about the feed.
 * @export
 * @interface Feed
 */
export interface Feed {
    /**
     * The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof Feed
     */
    feedId: string;
    /**
     * The feed type.
     * @type {string}
     * @memberof Feed
     */
    feedType: string;
    /**
     * A list of identifiers for the marketplaces that the feed is applied to.
     * @type {Array<string>}
     * @memberof Feed
     */
    marketplaceIds?: Array<string>;
    /**
     * The date and time when the feed was created, in ISO 8601 date time format.
     * @type {string}
     * @memberof Feed
     */
    createdTime: string;
    /**
     * The processing status of the feed.
     * @type {string}
     * @memberof Feed
     */
    processingStatus: FeedProcessingStatusEnum | 'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE';
    /**
     * The date and time when feed processing started, in ISO 8601 date time format.
     * @type {string}
     * @memberof Feed
     */
    processingStartTime?: string;
    /**
     * The date and time when feed processing completed, in ISO 8601 date time format.
     * @type {string}
     * @memberof Feed
     */
    processingEndTime?: string;
    /**
     * The identifier for the feed document. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof Feed
     */
    resultFeedDocumentId?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum FeedProcessingStatusEnum {
    Cancelled = "CANCELLED",
    Done = "DONE",
    Fatal = "FATAL",
    InProgress = "IN_PROGRESS",
    InQueue = "IN_QUEUE"
}
/**
 * Information required for the feed document.
 * @export
 * @interface FeedDocument
 */
export interface FeedDocument {
    /**
     * The identifier for the feed document. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof FeedDocument
     */
    feedDocumentId: string;
    /**
     * A presigned URL for the feed document. If `compressionAlgorithm` is not returned, you can download the feed directly from this URL. This URL expires after 5 minutes.
     * @type {string}
     * @memberof FeedDocument
     */
    url: string;
    /**
     * If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided.
     * @type {string}
     * @memberof FeedDocument
     */
    compressionAlgorithm?: FeedDocumentCompressionAlgorithmEnum | 'GZIP';
}
/**
    * @export
    * @enum {string}
    */
export declare enum FeedDocumentCompressionAlgorithmEnum {
    Gzip = "GZIP"
}
/**
 * Response schema.
 * @export
 * @interface GetFeedsResponse
 */
export interface GetFeedsResponse {
    /**
     * A list of feeds.
     * @type {Array<Feed>}
     * @memberof GetFeedsResponse
     */
    feeds: Array<Feed>;
    /**
     * Returned when the number of results exceeds pageSize. To get the next page of results, call the getFeeds operation with this token as the only parameter.
     * @type {string}
     * @memberof GetFeedsResponse
     */
    nextToken?: string;
}
/**
 * An error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * FeedsApi - axios parameter creator
 * @export
 */
export declare const FeedsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels the feed that you specify. Only feeds with processingStatus=IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelFeed: (feedId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateFeedSpecification} body Information required to create the feed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeed: (body: CreateFeedSpecification, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading the feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateFeedDocumentSpecification} body Specifies the content type for the createFeedDocument operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedDocument: (body: CreateFeedDocumentSpecification, options?: any) => Promise<RequestArgs>;
    /**
     * Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeed: (feedId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the information required for retrieving a feed document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedDocumentId The identifier of the feed document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedDocument: (feedDocumentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} [feedTypes] A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required.
     * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify.
     * @param {number} [pageSize] The maximum number of feeds to return in a single call.
     * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter feeds.
     * @param {string} [createdSince] The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days.
     * @param {string} [createdUntil] The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now.
     * @param {string} [nextToken] A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeeds: (feedTypes?: Array<string>, marketplaceIds?: Array<string>, pageSize?: number, processingStatuses?: Array<"CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE">, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * FeedsApi - functional programming interface
 * @export
 */
export declare const FeedsApiFp: (configuration?: Configuration) => {
    /**
     * Cancels the feed that you specify. Only feeds with processingStatus=IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelFeed(feedId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateFeedSpecification} body Information required to create the feed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeed(body: CreateFeedSpecification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFeedResponse>>;
    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading the feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateFeedDocumentSpecification} body Specifies the content type for the createFeedDocument operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedDocument(body: CreateFeedDocumentSpecification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFeedDocumentResponse>>;
    /**
     * Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeed(feedId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feed>>;
    /**
     * Returns the information required for retrieving a feed document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedDocumentId The identifier of the feed document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedDocument(feedDocumentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedDocument>>;
    /**
     * Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} [feedTypes] A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required.
     * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify.
     * @param {number} [pageSize] The maximum number of feeds to return in a single call.
     * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter feeds.
     * @param {string} [createdSince] The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days.
     * @param {string} [createdUntil] The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now.
     * @param {string} [nextToken] A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeeds(feedTypes?: Array<string>, marketplaceIds?: Array<string>, pageSize?: number, processingStatuses?: Array<"CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE">, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeedsResponse>>;
};
/**
 * FeedsApi - factory interface
 * @export
 */
export declare const FeedsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels the feed that you specify. Only feeds with processingStatus=IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelFeed(feedId: string, options?: any): AxiosPromise<void>;
    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateFeedSpecification} body Information required to create the feed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeed(body: CreateFeedSpecification, options?: any): AxiosPromise<CreateFeedResponse>;
    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading the feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateFeedDocumentSpecification} body Specifies the content type for the createFeedDocument operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedDocument(body: CreateFeedDocumentSpecification, options?: any): AxiosPromise<CreateFeedDocumentResponse>;
    /**
     * Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeed(feedId: string, options?: any): AxiosPromise<Feed>;
    /**
     * Returns the information required for retrieving a feed document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} feedDocumentId The identifier of the feed document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedDocument(feedDocumentId: string, options?: any): AxiosPromise<FeedDocument>;
    /**
     * Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} [feedTypes] A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required.
     * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify.
     * @param {number} [pageSize] The maximum number of feeds to return in a single call.
     * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter feeds.
     * @param {string} [createdSince] The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days.
     * @param {string} [createdUntil] The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now.
     * @param {string} [nextToken] A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeeds(feedTypes?: Array<string>, marketplaceIds?: Array<string>, pageSize?: number, processingStatuses?: Array<"CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE">, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any): AxiosPromise<GetFeedsResponse>;
};
/**
 * Request parameters for cancelFeed operation in FeedsApi.
 * @export
 * @interface FeedsApiCancelFeedRequest
 */
export interface FeedsApiCancelFeedRequest {
    /**
     * The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof FeedsApiCancelFeed
     */
    readonly feedId: string;
}
/**
 * Request parameters for createFeed operation in FeedsApi.
 * @export
 * @interface FeedsApiCreateFeedRequest
 */
export interface FeedsApiCreateFeedRequest {
    /**
     * Information required to create the feed.
     * @type {CreateFeedSpecification}
     * @memberof FeedsApiCreateFeed
     */
    readonly body: CreateFeedSpecification;
}
/**
 * Request parameters for createFeedDocument operation in FeedsApi.
 * @export
 * @interface FeedsApiCreateFeedDocumentRequest
 */
export interface FeedsApiCreateFeedDocumentRequest {
    /**
     * Specifies the content type for the createFeedDocument operation.
     * @type {CreateFeedDocumentSpecification}
     * @memberof FeedsApiCreateFeedDocument
     */
    readonly body: CreateFeedDocumentSpecification;
}
/**
 * Request parameters for getFeed operation in FeedsApi.
 * @export
 * @interface FeedsApiGetFeedRequest
 */
export interface FeedsApiGetFeedRequest {
    /**
     * The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof FeedsApiGetFeed
     */
    readonly feedId: string;
}
/**
 * Request parameters for getFeedDocument operation in FeedsApi.
 * @export
 * @interface FeedsApiGetFeedDocumentRequest
 */
export interface FeedsApiGetFeedDocumentRequest {
    /**
     * The identifier of the feed document.
     * @type {string}
     * @memberof FeedsApiGetFeedDocument
     */
    readonly feedDocumentId: string;
}
/**
 * Request parameters for getFeeds operation in FeedsApi.
 * @export
 * @interface FeedsApiGetFeedsRequest
 */
export interface FeedsApiGetFeedsRequest {
    /**
     * A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required.
     * @type {Array<string>}
     * @memberof FeedsApiGetFeeds
     */
    readonly feedTypes?: Array<string>;
    /**
     * A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify.
     * @type {Array<string>}
     * @memberof FeedsApiGetFeeds
     */
    readonly marketplaceIds?: Array<string>;
    /**
     * The maximum number of feeds to return in a single call.
     * @type {number}
     * @memberof FeedsApiGetFeeds
     */
    readonly pageSize?: number;
    /**
     * A list of processing statuses used to filter feeds.
     * @type {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>}
     * @memberof FeedsApiGetFeeds
     */
    readonly processingStatuses?: Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>;
    /**
     * The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days.
     * @type {string}
     * @memberof FeedsApiGetFeeds
     */
    readonly createdSince?: string;
    /**
     * The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now.
     * @type {string}
     * @memberof FeedsApiGetFeeds
     */
    readonly createdUntil?: string;
    /**
     * A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
     * @type {string}
     * @memberof FeedsApiGetFeeds
     */
    readonly nextToken?: string;
}
/**
 * FeedsApi - object-oriented interface
 * @export
 * @class FeedsApi
 * @extends {BaseAPI}
 */
export declare class FeedsApi extends BaseAPI {
    /**
     * Cancels the feed that you specify. Only feeds with processingStatus=IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FeedsApiCancelFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    cancelFeed(requestParameters: FeedsApiCancelFeedRequest, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FeedsApiCreateFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    createFeed(requestParameters: FeedsApiCreateFeedRequest, options?: any): Promise<import("axios").AxiosResponse<CreateFeedResponse, any>>;
    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading the feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FeedsApiCreateFeedDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    createFeedDocument(requestParameters: FeedsApiCreateFeedDocumentRequest, options?: any): Promise<import("axios").AxiosResponse<CreateFeedDocumentResponse, any>>;
    /**
     * Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FeedsApiGetFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    getFeed(requestParameters: FeedsApiGetFeedRequest, options?: any): Promise<import("axios").AxiosResponse<Feed, any>>;
    /**
     * Returns the information required for retrieving a feed document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FeedsApiGetFeedDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    getFeedDocument(requestParameters: FeedsApiGetFeedDocumentRequest, options?: any): Promise<import("axios").AxiosResponse<FeedDocument, any>>;
    /**
     * Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FeedsApiGetFeedsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    getFeeds(requestParameters?: FeedsApiGetFeedsRequest, options?: any): Promise<import("axios").AxiosResponse<GetFeedsResponse, any>>;
}

/**
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listing Items API Use Case Guide](doc:listings-items-api-v2020-09-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2020-09-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     *
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * An issue with a listings item.
 * @export
 * @interface Issue
 */
export interface Issue {
    /**
     * An issue code that identifies the type of issue.
     * @type {string}
     * @memberof Issue
     */
    code: string;
    /**
     * A message that describes the issue.
     * @type {string}
     * @memberof Issue
     */
    message: string;
    /**
     * The severity of the issue.
     * @type {string}
     * @memberof Issue
     */
    severity: IssueSeverityEnum | 'ERROR' | 'WARNING' | 'INFO';
    /**
     * Name of the attribute associated with the issue, if applicable.
     * @type {string}
     * @memberof Issue
     */
    attributeName?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum IssueSeverityEnum {
    Error = "ERROR",
    Warning = "WARNING",
    Info = "INFO"
}
/**
 * The request body schema for the patchListingsItem operation.
 * @export
 * @interface ListingsItemPatchRequest
 */
export interface ListingsItemPatchRequest {
    /**
     * The Amazon product type of the listings item.
     * @type {string}
     * @memberof ListingsItemPatchRequest
     */
    productType: string;
    /**
     * One or more JSON Patch operations to perform on the listings item.
     * @type {Array<PatchOperation>}
     * @memberof ListingsItemPatchRequest
     */
    patches: Array<PatchOperation>;
}
/**
 * The request body schema for the putListingsItem operation.
 * @export
 * @interface ListingsItemPutRequest
 */
export interface ListingsItemPutRequest {
    /**
     * The Amazon product type of the listings item.
     * @type {string}
     * @memberof ListingsItemPutRequest
     */
    productType: string;
    /**
     * The name of the requirements set for the provided data.
     * @type {string}
     * @memberof ListingsItemPutRequest
     */
    requirements?: ListingsItemPutRequestRequirementsEnum | 'LISTING' | 'LISTING_PRODUCT_ONLY' | 'LISTING_OFFER_ONLY';
    /**
     * JSON object containing structured listings item attribute data keyed by attribute name.
     * @type {object}
     * @memberof ListingsItemPutRequest
     */
    attributes: object;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ListingsItemPutRequestRequirementsEnum {
    Listing = "LISTING",
    ListingProductOnly = "LISTING_PRODUCT_ONLY",
    ListingOfferOnly = "LISTING_OFFER_ONLY"
}
/**
 * Response containing the results of a submission to the Selling Partner API for Listings Items.
 * @export
 * @interface ListingsItemSubmissionResponse
 */
export interface ListingsItemSubmissionResponse {
    /**
     * A selling partner provided identifier for an Amazon listing.
     * @type {string}
     * @memberof ListingsItemSubmissionResponse
     */
    sku: string;
    /**
     * The status of the listings item submission.
     * @type {string}
     * @memberof ListingsItemSubmissionResponse
     */
    status: ListingsItemSubmissionResponseStatusEnum | 'ACCEPTED' | 'INVALID';
    /**
     * The unique identifier of the listings item submission.
     * @type {string}
     * @memberof ListingsItemSubmissionResponse
     */
    submissionId: string;
    /**
     * Listings item issues related to the listings item submission.
     * @type {Array<Issue>}
     * @memberof ListingsItemSubmissionResponse
     */
    issues?: Array<Issue>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ListingsItemSubmissionResponseStatusEnum {
    Accepted = "ACCEPTED",
    Invalid = "INVALID"
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * Individual JSON Patch operation for an HTTP PATCH request.
 * @export
 * @interface PatchOperation
 */
export interface PatchOperation {
    /**
     * Type of JSON Patch operation. Supported JSON Patch operations include add, replace, and delete. See <https://tools.ietf.org/html/rfc6902>.
     * @type {string}
     * @memberof PatchOperation
     */
    op: PatchOperationOpEnum | 'add' | 'replace' | 'delete';
    /**
     * JSON Pointer path of the element to patch. See <https://tools.ietf.org/html/rfc6902>.
     * @type {string}
     * @memberof PatchOperation
     */
    path: string;
    /**
     * JSON value to add, replace, or delete.
     * @type {Array<object>}
     * @memberof PatchOperation
     */
    value?: Array<object>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum PatchOperationOpEnum {
    Add = "add",
    Replace = "replace",
    Delete = "delete"
}
/**
 * ListingsApi - axios parameter creator
 * @export
 */
export declare const ListingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListingsItem: (sellerId: string, sku: string, marketplaceIds: Array<string>, issueLocale?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {ListingsItemPatchRequest} body The request body schema for the patchListingsItem operation.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchListingsItem: (sellerId: string, sku: string, marketplaceIds: Array<string>, body: ListingsItemPatchRequest, issueLocale?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new or fully-updates an existing listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {ListingsItemPutRequest} body The request body schema for the putListingsItem operation.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putListingsItem: (sellerId: string, sku: string, marketplaceIds: Array<string>, body: ListingsItemPutRequest, issueLocale?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ListingsApi - functional programming interface
 * @export
 */
export declare const ListingsApiFp: (configuration?: Configuration) => {
    /**
     * Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListingsItem(sellerId: string, sku: string, marketplaceIds: Array<string>, issueLocale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingsItemSubmissionResponse>>;
    /**
     * Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {ListingsItemPatchRequest} body The request body schema for the patchListingsItem operation.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchListingsItem(sellerId: string, sku: string, marketplaceIds: Array<string>, body: ListingsItemPatchRequest, issueLocale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingsItemSubmissionResponse>>;
    /**
     * Creates a new or fully-updates an existing listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {ListingsItemPutRequest} body The request body schema for the putListingsItem operation.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putListingsItem(sellerId: string, sku: string, marketplaceIds: Array<string>, body: ListingsItemPutRequest, issueLocale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingsItemSubmissionResponse>>;
};
/**
 * ListingsApi - factory interface
 * @export
 */
export declare const ListingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListingsItem(sellerId: string, sku: string, marketplaceIds: Array<string>, issueLocale?: string, options?: any): AxiosPromise<ListingsItemSubmissionResponse>;
    /**
     * Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {ListingsItemPatchRequest} body The request body schema for the patchListingsItem operation.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchListingsItem(sellerId: string, sku: string, marketplaceIds: Array<string>, body: ListingsItemPatchRequest, issueLocale?: string, options?: any): AxiosPromise<ListingsItemSubmissionResponse>;
    /**
     * Creates a new or fully-updates an existing listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} sellerId A selling partner identifier, such as a merchant account or vendor code.
     * @param {string} sku A selling partner provided identifier for an Amazon listing.
     * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
     * @param {ListingsItemPutRequest} body The request body schema for the putListingsItem operation.
     * @param {string} [issueLocale] A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putListingsItem(sellerId: string, sku: string, marketplaceIds: Array<string>, body: ListingsItemPutRequest, issueLocale?: string, options?: any): AxiosPromise<ListingsItemSubmissionResponse>;
};
/**
 * Request parameters for deleteListingsItem operation in ListingsApi.
 * @export
 * @interface ListingsApiDeleteListingsItemRequest
 */
export interface ListingsApiDeleteListingsItemRequest {
    /**
     * A selling partner identifier, such as a merchant account or vendor code.
     * @type {string}
     * @memberof ListingsApiDeleteListingsItem
     */
    readonly sellerId: string;
    /**
     * A selling partner provided identifier for an Amazon listing.
     * @type {string}
     * @memberof ListingsApiDeleteListingsItem
     */
    readonly sku: string;
    /**
     * A comma-delimited list of Amazon marketplace identifiers for the request.
     * @type {Array<string>}
     * @memberof ListingsApiDeleteListingsItem
     */
    readonly marketplaceIds: Array<string>;
    /**
     * A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @type {string}
     * @memberof ListingsApiDeleteListingsItem
     */
    readonly issueLocale?: string;
}
/**
 * Request parameters for patchListingsItem operation in ListingsApi.
 * @export
 * @interface ListingsApiPatchListingsItemRequest
 */
export interface ListingsApiPatchListingsItemRequest {
    /**
     * A selling partner identifier, such as a merchant account or vendor code.
     * @type {string}
     * @memberof ListingsApiPatchListingsItem
     */
    readonly sellerId: string;
    /**
     * A selling partner provided identifier for an Amazon listing.
     * @type {string}
     * @memberof ListingsApiPatchListingsItem
     */
    readonly sku: string;
    /**
     * A comma-delimited list of Amazon marketplace identifiers for the request.
     * @type {Array<string>}
     * @memberof ListingsApiPatchListingsItem
     */
    readonly marketplaceIds: Array<string>;
    /**
     * The request body schema for the patchListingsItem operation.
     * @type {ListingsItemPatchRequest}
     * @memberof ListingsApiPatchListingsItem
     */
    readonly body: ListingsItemPatchRequest;
    /**
     * A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @type {string}
     * @memberof ListingsApiPatchListingsItem
     */
    readonly issueLocale?: string;
}
/**
 * Request parameters for putListingsItem operation in ListingsApi.
 * @export
 * @interface ListingsApiPutListingsItemRequest
 */
export interface ListingsApiPutListingsItemRequest {
    /**
     * A selling partner identifier, such as a merchant account or vendor code.
     * @type {string}
     * @memberof ListingsApiPutListingsItem
     */
    readonly sellerId: string;
    /**
     * A selling partner provided identifier for an Amazon listing.
     * @type {string}
     * @memberof ListingsApiPutListingsItem
     */
    readonly sku: string;
    /**
     * A comma-delimited list of Amazon marketplace identifiers for the request.
     * @type {Array<string>}
     * @memberof ListingsApiPutListingsItem
     */
    readonly marketplaceIds: Array<string>;
    /**
     * The request body schema for the putListingsItem operation.
     * @type {ListingsItemPutRequest}
     * @memberof ListingsApiPutListingsItem
     */
    readonly body: ListingsItemPutRequest;
    /**
     * A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @type {string}
     * @memberof ListingsApiPutListingsItem
     */
    readonly issueLocale?: string;
}
/**
 * ListingsApi - object-oriented interface
 * @export
 * @class ListingsApi
 * @extends {BaseAPI}
 */
export declare class ListingsApi extends BaseAPI {
    /**
     * Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ListingsApiDeleteListingsItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    deleteListingsItem(requestParameters: ListingsApiDeleteListingsItemRequest, options?: any): Promise<import("axios").AxiosResponse<ListingsItemSubmissionResponse, any>>;
    /**
     * Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ListingsApiPatchListingsItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    patchListingsItem(requestParameters: ListingsApiPatchListingsItemRequest, options?: any): Promise<import("axios").AxiosResponse<ListingsItemSubmissionResponse, any>>;
    /**
     * Creates a new or fully-updates an existing listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ListingsApiPutListingsItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    putListingsItem(requestParameters: ListingsApiPutListingsItemRequest, options?: any): Promise<import("axios").AxiosResponse<ListingsItemSubmissionResponse, any>>;
}

/**
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2021-06-30
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * The response schema.
 * @export
 * @interface CreateReportResponse
 */
export interface CreateReportResponse {
    /**
     * The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof CreateReportResponse
     */
    reportId: string;
}
/**
 * Response schema.
 * @export
 * @interface CreateReportScheduleResponse
 */
export interface CreateReportScheduleResponse {
    /**
     * The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof CreateReportScheduleResponse
     */
    reportScheduleId: string;
}
/**
 * Information required to create the report schedule.
 * @export
 * @interface CreateReportScheduleSpecification
 */
export interface CreateReportScheduleSpecification {
    /**
     * The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
     * @type {string}
     * @memberof CreateReportScheduleSpecification
     */
    reportType: string;
    /**
     * A list of marketplace identifiers for the report schedule.
     * @type {Array<string>}
     * @memberof CreateReportScheduleSpecification
     */
    marketplaceIds: Array<string>;
    /**
     * Additional information passed to reports. This varies by report type.
     * @type {{ [key: string]: string; }}
     * @memberof CreateReportScheduleSpecification
     */
    reportOptions?: {
        [key: string]: string;
    };
    /**
     * One of a set of predefined <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> periods that specifies how often a report should be created.
     * @type {string}
     * @memberof CreateReportScheduleSpecification
     */
    period: CreateReportScheduleSpecificationPeriodEnum | 'PT5M' | 'PT15M' | 'PT30M' | 'PT1H' | 'PT2H' | 'PT4H' | 'PT8H' | 'PT12H' | 'P1D' | 'P2D' | 'P3D' | 'PT84H' | 'P7D' | 'P14D' | 'P15D' | 'P18D' | 'P30D' | 'P1M';
    /**
     * The date and time when the schedule will create its next report, in <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> date time format.
     * @type {string}
     * @memberof CreateReportScheduleSpecification
     */
    nextReportCreationTime?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum CreateReportScheduleSpecificationPeriodEnum {
    Pt5M = "PT5M",
    Pt15M = "PT15M",
    Pt30M = "PT30M",
    Pt1H = "PT1H",
    Pt2H = "PT2H",
    Pt4H = "PT4H",
    Pt8H = "PT8H",
    Pt12H = "PT12H",
    P1D = "P1D",
    P2D = "P2D",
    P3D = "P3D",
    Pt84H = "PT84H",
    P7D = "P7D",
    P14D = "P14D",
    P15D = "P15D",
    P18D = "P18D",
    P30D = "P30D",
    P1M = "P1M"
}
/**
 * Information required to create the report.
 * @export
 * @interface CreateReportSpecification
 */
export interface CreateReportSpecification {
    /**
     * Additional information passed to reports. This varies by report type.
     * @type {{ [key: string]: string; }}
     * @memberof CreateReportSpecification
     */
    reportOptions?: {
        [key: string]: string;
    };
    /**
     * The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
     * @type {string}
     * @memberof CreateReportSpecification
     */
    reportType: string;
    /**
     * The start of a date and time range, in <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
     * @type {string}
     * @memberof CreateReportSpecification
     */
    dataStartTime?: string;
    /**
     * The end of a date and time range, in <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
     * @type {string}
     * @memberof CreateReportSpecification
     */
    dataEndTime?: string;
    /**
     * A list of marketplace identifiers. The report document\'s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
     * @type {Array<string>}
     * @memberof CreateReportSpecification
     */
    marketplaceIds: Array<string>;
}
/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * Error response returned when the request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * The response for the `getReports` operation.
 * @export
 * @interface GetReportsResponse
 */
export interface GetReportsResponse {
    /**
     * A list of reports.
     * @type {Array<Report>}
     * @memberof GetReportsResponse
     */
    reports: Array<Report>;
    /**
     * Returned when the number of results exceeds `pageSize`. To get the next page of results, call `getReports` with this token as the only parameter.
     * @type {string}
     * @memberof GetReportsResponse
     */
    nextToken?: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * Detailed information about the report.
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * A list of marketplace identifiers for the report.
     * @type {Array<string>}
     * @memberof Report
     */
    marketplaceIds?: Array<string>;
    /**
     * The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof Report
     */
    reportId: string;
    /**
     * The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
     * @type {string}
     * @memberof Report
     */
    reportType: string;
    /**
     * The start of a date and time range used for selecting the data to report.
     * @type {string}
     * @memberof Report
     */
    dataStartTime?: string;
    /**
     * The end of a date and time range used for selecting the data to report.
     * @type {string}
     * @memberof Report
     */
    dataEndTime?: string;
    /**
     * The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof Report
     */
    reportScheduleId?: string;
    /**
     * The date and time when the report was created.
     * @type {string}
     * @memberof Report
     */
    createdTime: string;
    /**
     * The processing status of the report.
     * @type {string}
     * @memberof Report
     */
    processingStatus: ReportProcessingStatusEnum | 'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE';
    /**
     * The date and time when the report processing started, in <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> date time format.
     * @type {string}
     * @memberof Report
     */
    processingStartTime?: string;
    /**
     * The date and time when the report processing completed, in <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> date time format.
     * @type {string}
     * @memberof Report
     */
    processingEndTime?: string;
    /**
     * The identifier for the report document. Pass this into the `getReportDocument` operation to get the information you will need to retrieve the report document\'s contents.
     * @type {string}
     * @memberof Report
     */
    reportDocumentId?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ReportProcessingStatusEnum {
    Cancelled = "CANCELLED",
    Done = "DONE",
    Fatal = "FATAL",
    InProgress = "IN_PROGRESS",
    InQueue = "IN_QUEUE"
}
/**
 * Information required for the report document.
 * @export
 * @interface ReportDocument
 */
export interface ReportDocument {
    /**
     * The identifier for the report document. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof ReportDocument
     */
    reportDocumentId: string;
    /**
     * A presigned URL for the report document. If `compressionAlgorithm` is not returned, you can download the report directly from this URL. This URL expires after 5 minutes.
     * @type {string}
     * @memberof ReportDocument
     */
    url: string;
    /**
     * If the report document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the report when you download. Otherwise, you can download the report directly. Refer to [Step 2. Download the report](https://developer-docs.amazon.com/sp-api/docs/reports-api-v2021-06-30-retrieve-a-report#step-2-download-the-report) in the use case guide, where sample code is provided.
     * @type {string}
     * @memberof ReportDocument
     */
    compressionAlgorithm?: ReportDocumentCompressionAlgorithmEnum | 'GZIP';
}
/**
    * @export
    * @enum {string}
    */
export declare enum ReportDocumentCompressionAlgorithmEnum {
    Gzip = "GZIP"
}
/**
 * Detailed information about a report schedule.
 * @export
 * @interface ReportSchedule
 */
export interface ReportSchedule {
    /**
     * The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof ReportSchedule
     */
    reportScheduleId: string;
    /**
     * The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
     * @type {string}
     * @memberof ReportSchedule
     */
    reportType: string;
    /**
     * A list of marketplace identifiers. The report document\'s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
     * @type {Array<string>}
     * @memberof ReportSchedule
     */
    marketplaceIds?: Array<string>;
    /**
     * Additional information passed to reports. This varies by report type.
     * @type {{ [key: string]: string; }}
     * @memberof ReportSchedule
     */
    reportOptions?: {
        [key: string]: string;
    };
    /**
     * An <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> period value that indicates how often a report should be created.
     * @type {string}
     * @memberof ReportSchedule
     */
    period: string;
    /**
     * The date and time when the schedule will create its next report, in <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> date time format.
     * @type {string}
     * @memberof ReportSchedule
     */
    nextReportCreationTime?: string;
}
/**
 * A list of report schedules.
 * @export
 * @interface ReportScheduleList
 */
export interface ReportScheduleList {
    /**
     * Detailed information about a report schedule.
     * @type {Array<ReportSchedule>}
     * @memberof ReportScheduleList
     */
    reportSchedules: Array<ReportSchedule>;
}
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export declare const ReportsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels the report that you specify. Only reports with `processingStatus=IN_QUEUE` can be cancelled. Cancelled reports are returned in subsequent calls to the `getReport` and `getReports` operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelReport: (reportId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelReportSchedule: (reportScheduleId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateReportSpecification} body Information required to create the report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport: (body: CreateReportSpecification, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateReportScheduleSpecification} body Information required to create the report schedule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportSchedule: (body: CreateReportScheduleSpecification, options?: any) => Promise<RequestArgs>;
    /**
     * Returns report details (including the `reportDocumentId`, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport: (reportId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the information required for retrieving a report document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportDocumentId The identifier for the report document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDocument: (reportDocumentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSchedule: (reportScheduleId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} reportTypes A list of report types used to filter report schedules. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSchedules: (reportTypes: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} [reportTypes] A list of report types used to filter reports. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required.
     * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter reports.
     * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify.
     * @param {number} [pageSize] The maximum number of reports to return in a single call.
     * @param {string} [createdSince] The earliest report creation date and time for reports to include in the response, in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days.
     * @param {string} [createdUntil] The latest report creation date and time for reports to include in the response, in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; date time format. The default is now.
     * @param {string} [nextToken] A string token returned in the response to your previous request. &#x60;nextToken&#x60; is returned when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the &#x60;getReports&#x60; operation and include this token as the only parameter. Specifying &#x60;nextToken&#x60; with any other parameters will cause the request to fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports: (reportTypes?: Array<string>, processingStatuses?: Array<"CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE">, marketplaceIds?: Array<string>, pageSize?: number, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ReportsApi - functional programming interface
 * @export
 */
export declare const ReportsApiFp: (configuration?: Configuration) => {
    /**
     * Cancels the report that you specify. Only reports with `processingStatus=IN_QUEUE` can be cancelled. Cancelled reports are returned in subsequent calls to the `getReport` and `getReports` operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelReport(reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelReportSchedule(reportScheduleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateReportSpecification} body Information required to create the report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(body: CreateReportSpecification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReportResponse>>;
    /**
     * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateReportScheduleSpecification} body Information required to create the report schedule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportSchedule(body: CreateReportScheduleSpecification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReportScheduleResponse>>;
    /**
     * Returns report details (including the `reportDocumentId`, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>>;
    /**
     * Returns the information required for retrieving a report document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportDocumentId The identifier for the report document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDocument(reportDocumentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDocument>>;
    /**
     * Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSchedule(reportScheduleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportSchedule>>;
    /**
     * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} reportTypes A list of report types used to filter report schedules. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSchedules(reportTypes: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportScheduleList>>;
    /**
     * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} [reportTypes] A list of report types used to filter reports. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required.
     * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter reports.
     * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify.
     * @param {number} [pageSize] The maximum number of reports to return in a single call.
     * @param {string} [createdSince] The earliest report creation date and time for reports to include in the response, in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days.
     * @param {string} [createdUntil] The latest report creation date and time for reports to include in the response, in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; date time format. The default is now.
     * @param {string} [nextToken] A string token returned in the response to your previous request. &#x60;nextToken&#x60; is returned when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the &#x60;getReports&#x60; operation and include this token as the only parameter. Specifying &#x60;nextToken&#x60; with any other parameters will cause the request to fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(reportTypes?: Array<string>, processingStatuses?: Array<"CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE">, marketplaceIds?: Array<string>, pageSize?: number, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportsResponse>>;
};
/**
 * ReportsApi - factory interface
 * @export
 */
export declare const ReportsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels the report that you specify. Only reports with `processingStatus=IN_QUEUE` can be cancelled. Cancelled reports are returned in subsequent calls to the `getReport` and `getReports` operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelReport(reportId: string, options?: any): AxiosPromise<void>;
    /**
     * Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelReportSchedule(reportScheduleId: string, options?: any): AxiosPromise<void>;
    /**
     * Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateReportSpecification} body Information required to create the report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(body: CreateReportSpecification, options?: any): AxiosPromise<CreateReportResponse>;
    /**
     * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CreateReportScheduleSpecification} body Information required to create the report schedule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportSchedule(body: CreateReportScheduleSpecification, options?: any): AxiosPromise<CreateReportScheduleResponse>;
    /**
     * Returns report details (including the `reportDocumentId`, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(reportId: string, options?: any): AxiosPromise<Report>;
    /**
     * Returns the information required for retrieving a report document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportDocumentId The identifier for the report document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportDocument(reportDocumentId: string, options?: any): AxiosPromise<ReportDocument>;
    /**
     * Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSchedule(reportScheduleId: string, options?: any): AxiosPromise<ReportSchedule>;
    /**
     * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} reportTypes A list of report types used to filter report schedules. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportSchedules(reportTypes: Array<string>, options?: any): AxiosPromise<ReportScheduleList>;
    /**
     * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array<string>} [reportTypes] A list of report types used to filter reports. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required.
     * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter reports.
     * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify.
     * @param {number} [pageSize] The maximum number of reports to return in a single call.
     * @param {string} [createdSince] The earliest report creation date and time for reports to include in the response, in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days.
     * @param {string} [createdUntil] The latest report creation date and time for reports to include in the response, in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; date time format. The default is now.
     * @param {string} [nextToken] A string token returned in the response to your previous request. &#x60;nextToken&#x60; is returned when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the &#x60;getReports&#x60; operation and include this token as the only parameter. Specifying &#x60;nextToken&#x60; with any other parameters will cause the request to fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(reportTypes?: Array<string>, processingStatuses?: Array<"CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE">, marketplaceIds?: Array<string>, pageSize?: number, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any): AxiosPromise<GetReportsResponse>;
};
/**
 * Request parameters for cancelReport operation in ReportsApi.
 * @export
 * @interface ReportsApiCancelReportRequest
 */
export interface ReportsApiCancelReportRequest {
    /**
     * The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof ReportsApiCancelReport
     */
    readonly reportId: string;
}
/**
 * Request parameters for cancelReportSchedule operation in ReportsApi.
 * @export
 * @interface ReportsApiCancelReportScheduleRequest
 */
export interface ReportsApiCancelReportScheduleRequest {
    /**
     * The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof ReportsApiCancelReportSchedule
     */
    readonly reportScheduleId: string;
}
/**
 * Request parameters for createReport operation in ReportsApi.
 * @export
 * @interface ReportsApiCreateReportRequest
 */
export interface ReportsApiCreateReportRequest {
    /**
     * Information required to create the report.
     * @type {CreateReportSpecification}
     * @memberof ReportsApiCreateReport
     */
    readonly body: CreateReportSpecification;
}
/**
 * Request parameters for createReportSchedule operation in ReportsApi.
 * @export
 * @interface ReportsApiCreateReportScheduleRequest
 */
export interface ReportsApiCreateReportScheduleRequest {
    /**
     * Information required to create the report schedule.
     * @type {CreateReportScheduleSpecification}
     * @memberof ReportsApiCreateReportSchedule
     */
    readonly body: CreateReportScheduleSpecification;
}
/**
 * Request parameters for getReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportRequest
 */
export interface ReportsApiGetReportRequest {
    /**
     * The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof ReportsApiGetReport
     */
    readonly reportId: string;
}
/**
 * Request parameters for getReportDocument operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportDocumentRequest
 */
export interface ReportsApiGetReportDocumentRequest {
    /**
     * The identifier for the report document.
     * @type {string}
     * @memberof ReportsApiGetReportDocument
     */
    readonly reportDocumentId: string;
}
/**
 * Request parameters for getReportSchedule operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportScheduleRequest
 */
export interface ReportsApiGetReportScheduleRequest {
    /**
     * The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof ReportsApiGetReportSchedule
     */
    readonly reportScheduleId: string;
}
/**
 * Request parameters for getReportSchedules operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportSchedulesRequest
 */
export interface ReportsApiGetReportSchedulesRequest {
    /**
     * A list of report types used to filter report schedules. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
     * @type {Array<string>}
     * @memberof ReportsApiGetReportSchedules
     */
    readonly reportTypes: Array<string>;
}
/**
 * Request parameters for getReports operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportsRequest
 */
export interface ReportsApiGetReportsRequest {
    /**
     * A list of report types used to filter reports. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required.
     * @type {Array<string>}
     * @memberof ReportsApiGetReports
     */
    readonly reportTypes?: Array<string>;
    /**
     * A list of processing statuses used to filter reports.
     * @type {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>}
     * @memberof ReportsApiGetReports
     */
    readonly processingStatuses?: Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>;
    /**
     * A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify.
     * @type {Array<string>}
     * @memberof ReportsApiGetReports
     */
    readonly marketplaceIds?: Array<string>;
    /**
     * The maximum number of reports to return in a single call.
     * @type {number}
     * @memberof ReportsApiGetReports
     */
    readonly pageSize?: number;
    /**
     * The earliest report creation date and time for reports to include in the response, in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days.
     * @type {string}
     * @memberof ReportsApiGetReports
     */
    readonly createdSince?: string;
    /**
     * The latest report creation date and time for reports to include in the response, in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; date time format. The default is now.
     * @type {string}
     * @memberof ReportsApiGetReports
     */
    readonly createdUntil?: string;
    /**
     * A string token returned in the response to your previous request. &#x60;nextToken&#x60; is returned when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the &#x60;getReports&#x60; operation and include this token as the only parameter. Specifying &#x60;nextToken&#x60; with any other parameters will cause the request to fail.
     * @type {string}
     * @memberof ReportsApiGetReports
     */
    readonly nextToken?: string;
}
/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export declare class ReportsApi extends BaseAPI {
    /**
     * Cancels the report that you specify. Only reports with `processingStatus=IN_QUEUE` can be cancelled. Cancelled reports are returned in subsequent calls to the `getReport` and `getReports` operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiCancelReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    cancelReport(requestParameters: ReportsApiCancelReportRequest, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiCancelReportScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    cancelReportSchedule(requestParameters: ReportsApiCancelReportScheduleRequest, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiCreateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    createReport(requestParameters: ReportsApiCreateReportRequest, options?: any): Promise<import("axios").AxiosResponse<CreateReportResponse, any>>;
    /**
     * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiCreateReportScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    createReportSchedule(requestParameters: ReportsApiCreateReportScheduleRequest, options?: any): Promise<import("axios").AxiosResponse<CreateReportScheduleResponse, any>>;
    /**
     * Returns report details (including the `reportDocumentId`, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiGetReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReport(requestParameters: ReportsApiGetReportRequest, options?: any): Promise<import("axios").AxiosResponse<Report, any>>;
    /**
     * Returns the information required for retrieving a report document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiGetReportDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReportDocument(requestParameters: ReportsApiGetReportDocumentRequest, options?: any): Promise<import("axios").AxiosResponse<ReportDocument, any>>;
    /**
     * Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiGetReportScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReportSchedule(requestParameters: ReportsApiGetReportScheduleRequest, options?: any): Promise<import("axios").AxiosResponse<ReportSchedule, any>>;
    /**
     * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiGetReportSchedulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReportSchedules(requestParameters: ReportsApiGetReportSchedulesRequest, options?: any): Promise<import("axios").AxiosResponse<ReportScheduleList, any>>;
    /**
     * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ReportsApiGetReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReports(requestParameters?: ReportsApiGetReportsRequest, options?: any): Promise<import("axios").AxiosResponse<GetReportsResponse, any>>;
}
